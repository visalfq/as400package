{"version":3,"sources":["/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/webpack/bootstrap","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/util.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/array-struct.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/expr.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/aggregation.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/case.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/json.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/tables.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/column.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/command.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/exec.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/union.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/analyze.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/delete.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/proc.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/transaction.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/func.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/limit.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/alter.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/index-definition.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/select.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/update.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/over.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/with.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/create.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/sql.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/constrain.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/window.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/insert.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/binary.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/interval.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/assign.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/show.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.single.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/src/parser.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/pegjs/transactsql.pegjs","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/index.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/Workspaces/OpenSources/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parseOptions","parserOpt","commonOptionConnector","keyword","action","opt","concat","toUpperCase","connector","str","createValueExpr","_typeof","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","val","parentheses","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","hasVal","literalToSQL","literal","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","dataTypeToSQL","dataType","length","scale","arrayStructTypeToSQL","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","eventKw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","columnToSQL","commonKeywordArgsToSQL","autoIncrementToSQL","autoIncrement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","within_group_orderby","fnName","overStr","overToSQL","distinct","orderby","orderOrPartitionByToSQL","separator","withinGroup","filterStr","where","any_value","anyValueFuncToSQL","window_func","windowFuncToSQL","assign","assignToSQL","binary_expr","binaryToSQL","case","res","conditions","exprItem","len","cond","cast","castToSQL","column_ref","column_definition","columnDefinitionToSQL","datatype","extract","extractFunToSQL","flatten","flattenFunToSQL","fulltext_search","fullTextSearchToSQL","function","funcToSQL","insert","unionToSQL","interval","intervalToSQL","json","show","showToSQL","struct","tablefunc","tablefuncFunToSQL","tables","tablesToSQL","unnest","unnestToSQL","namedWindowExprListToSQL","varToSQL","_expr$prefix","members","quoted","varName","exprOrigin","Reflect","deleteProperty","_i","_Object$keys","getExprListSQL","expressions","upperPrefix","info","nulls","select","_next","selectToSQL","unary_expr","unarExpr","space","unnestExpr","as","withOffset","with_offset","operatorToSQL","column","in_expr","sql","pivotOperatorToSQL","tableHintToSQL","tableHintExpr","index","index_columns","tableToSQL","tableInfo","table","db","prefixStr","schema","server","tablesample","table_hint","serverName","schemaStr","tableName","values","valueSQL","valuesExpr","valuesToSQL","split","slice","tumble","data","timecol","size","tableTumbleToSQL","tableSampleSQL","repeatable","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","tableOptionItem","array_index","_expr$arrows","arrows","properties","order_by","_expr$subFields","subFields","offset","offsetExpr","offsetItem","columnOffsetToSQL","_toConsumableArray","arrow","columnDataType","_ref","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onAction","on_action","onRef","columnOrder","opclass","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","auto_increment","uniqueKey","unique","primaryKey","primary_key","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","apply","columnOption","generated","storage_type","generatedExpressionToSQL","asToSQL","asStr","test","against","columnsStr","has","getDual","callToSQL","stmt","storeProcessCall","commonCmdToSQL","trigger","options","descToSQL","executeToSQL","nameWithArgs","forLoopToSQL","label","target","query","stmts","multipleToSQL","raiseToSQL","level","raise","exprInfo","option","renameToSQL","_step","_iterator","_createForOfIteratorHelper","done","renameInfo","err","e","f","useToSQL","setVarToSQL","lockUnlockToSQL","_step2","tableStmt","_iterator2","_loop","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","deallocateToSQL","declareToSQL","declare","dec","at","constant","not_null","declareInfo","createDefinitionToSQL","ifToSQL","boolExpr","boolean_expr","elseExpr","else_expr","elseifExpr","elseif_expr","ifExpr","if_expr","go","semicolons","astToSQL","elseif","then","semicolon","grantUserOrRoleToSQL","host","grantAndRevokeToSQL","grant_option_for","objects","to_from","user_or_roles","withOpt","objStr","obj","priv","privSQL","object_type","priv_level","privLevel","execVariablesToSQL","typeToSQLFn","alterToSQL","analyze","attach","createToSQL","deallocate","delete","from","withInfo","limit","withToSQL","columnInfo","addition","limitToSQL","exec","parameters","execute","for","update","updateToSQL","if","insertToSQL","drop","truncate","replace","use","rename","desc","set","lock","unlock","grant","revoke","proc","returnToSQL","transaction","fun","_stmt","_parentheses","_orderby","_limit","nextFun","unionKeyword","set_op","astInfo","having","expression","alias","_expr$properties","dataTypeSuffix","symbolChar","array","arrayDimensionToSymbol","castType","cast_type","source","argsStr","arg","flattenArgToSQL","args_parentheses","collateStr","suffixStr","composePrefixValSuffix","fetch","seperator","limitOffsetToSQL","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","trim","alterArgsToSQL","defaultSQL","_stmt$keyword","argsExpr","alterAggregateToSQL","_stmt$expr","alterTableToSQL","alterSchemaToSQL","alterDomainTypeToSQL","alterFunctionToSQL","attributes","view","withExpr","alterViewToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","_indexDefinition$inde","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","selectIntoToSQL","into","position","intoType","asStructVal","as_struct_val","forXml","_stmt$for_sys_time_as","for_sys_time_as_of","forSystem","lockingRead","locking_read","groupby","_stmt$into","parentheses_symbol","qualify","top","windowInfo","window","distinctToSQL","intoSQL","forXmlToSQL","setToSQL","sets","setItem","asWindowSpec","as_window_specification","asWindowSpecToSQL","onUpdate","isRecursive","recursive","withExprStr","cte","createDomainToSQL","domain","definitionType","createFunctionReturnsOptToSQL","createFunctionOptionToSQL","begin","parameter","createFunctionToSQL","returns","last","functionName","argsSQL","createFunctionReturnsToSQL","aggregateOptionToSQL","createAggregateToSQL","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","orReplace","or_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","for_each","location","or","when","createConstraintTriggerToSQL","definer","triggerBody","ife","triggerEvents","triggerOrder","order","triggerTime","time","eventStr","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","algorithm","sqlSecurity","sql_security","withClause","withOptions","with_options","viewName","createViewToSQL","createTypeToSQL","attribute","defaultRole","default_role","lockOption","passwordOptions","password_options","requireOption","require","resourceOptions","resource_options","userAuthOptions","user","userAuthOption","userInfo","auth_option","auth_plugin","resourceOption","passwordOption","createUserToSQL","supportedTypes","checkSupported","includes","toSQL","goToSQL","go_next","sqlItem","constraintDefinition","enforced","constraintSQL","constraintTypeStr","windowSpec","window_specification","partitionby","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","constructArgsList","_expr$consider_nulls","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","partitionToSQL","partitionArr","conflictTargetToSQL","conflictTarget","conflictActionToSQL","conflictAction","conflictToSQL","conflict","_stmt$prefix","onDuplicateUpdate","on_duplicate_update","duplicateSet","op","rstr","isBetween","intervalExpr","unit","leftVar","rightVal","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","role_list","userAndHost","role","showGrantsForUser","_defineProperty","Parser","_classCallCheck","arguments","undefined","_opt$database","typeCase","parsers","whiteList","_opt$type","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c6","head","tail","createList","peg$c11","peg$literalExpectation","peg$c14","peg$c16","peg$c18","peg$c25","peg$c30","peg$c32","peg$c35","peg$c48","peg$c52","peg$c54","peg$c56","peg$c58","peg$c61","peg$c63","peg$c65","peg$c70","peg$c75","peg$c77","peg$c81","peg$c83","peg$c86","peg$c90","peg$c97","peg$c99","peg$c101","peg$c103","peg$c105","peg$c114","peg$c116","peg$c118","peg$c120","peg$c123","peg$c125","peg$c127","peg$c129","peg$c135","peg$c143","peg$c147","peg$c149","peg$c151","peg$c154","peg$c157","peg$c159","peg$c161","peg$c167","peg$c169","peg$c171","peg$c173","peg$c175","peg$c178","peg$c180","peg$c183","peg$c185","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c201","peg$c204","peg$c206","peg$c208","peg$c210","peg$c213","peg$c217","peg$c224","peg$c226","peg$c229","peg$c231","peg$c238","peg$c240","peg$c247","peg$c263","peg$c265","peg$c271","peg$c273","k","kbs","peg$c275","peg$c277","peg$c279","peg$c281","peg$c283","peg$c286","peg$c288","peg$c291","peg$c293","peg$c295","peg$c297","peg$c299","peg$c301","peg$c303","peg$c305","peg$c307","peg$c309","peg$c311","peg$c314","peg$c316","peg$c318","peg$c320","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c326","peg$c329","peg$c332","peg$c336","peg$c338","peg$c340","peg$c342","peg$c344","peg$c346","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c366","peg$c368","peg$c390","peg$c392","peg$c394","peg$c397","peg$c400","peg$c405","peg$c425","createBinaryExprChain","peg$c427","peg$c431","nk","peg$c434","peg$c436","peg$c438","peg$c440","peg$c442","peg$c444","peg$c452","peg$c454","peg$c457","peg$c459","peg$c461","peg$c465","reservedMap","peg$c469","peg$c470","peg$c471","peg$classExpectation","peg$c472","chars","peg$c473","peg$c474","peg$c476","peg$c477","peg$c478","peg$c480","peg$c481","peg$c482","peg$c484","peg$c487","peg$c488","peg$c489","peg$c490","peg$c491","peg$c492","peg$c493","peg$c495","peg$c501","peg$c514","peg$c517","peg$c520","peg$c523","peg$c542","peg$c545","ca","peg$c546","peg$c547","peg$c548","peg$c549","peg$c551","peg$c554","peg$c557","peg$c560","peg$c563","peg$c566","peg$c569","peg$c572","peg$c575","peg$c578","peg$c581","peg$c584","peg$c587","peg$c590","peg$c592","peg$c593","peg$c602","peg$c606","peg$c607","peg$c608","peg$c609","peg$c610","peg$c611","peg$c612","peg$c613","peg$c616","peg$c618","peg$c620","peg$c622","peg$c624","peg$c626","peg$c630","peg$c633","peg$c636","peg$c638","peg$c641","peg$c643","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c663","peg$c666","peg$c668","peg$c671","peg$c673","peg$c675","peg$c678","peg$c681","peg$c684","peg$c687","peg$c691","peg$c693","peg$c695","peg$c697","peg$c699","peg$c701","peg$c703","peg$c705","peg$c707","peg$c709","peg$c711","peg$c713","peg$c715","peg$c717","peg$c720","peg$c722","peg$c724","peg$c726","peg$c728","peg$c730","peg$c733","peg$c736","peg$c739","peg$c742","peg$c745","peg$c748","peg$c751","peg$c754","peg$c756","peg$c760","peg$c763","peg$c766","peg$c769","peg$c772","peg$c775","peg$c778","peg$c781","peg$c784","peg$c786","peg$c788","peg$c790","peg$c792","peg$c794","peg$c797","peg$c800","peg$c803","peg$c806","peg$c809","peg$c812","peg$c815","peg$c818","peg$c821","peg$c824","peg$c827","peg$c830","peg$c833","peg$c836","peg$c839","peg$c842","peg$c845","peg$c848","peg$c851","peg$c854","peg$c857","peg$c860","peg$c863","peg$c866","peg$c869","peg$c872","peg$c875","peg$c878","peg$c881","peg$c884","peg$c887","peg$c890","peg$c893","peg$c896","peg$c899","peg$c902","peg$c905","peg$c911","peg$c914","peg$c917","peg$c920","peg$c923","peg$c926","peg$c929","peg$c932","peg$c935","peg$c938","peg$c941","peg$c944","peg$c947","peg$c950","peg$c954","peg$c957","peg$c960","peg$c963","peg$c966","peg$c968","peg$c970","peg$c972","peg$c974","peg$c976","peg$c979","peg$c982","peg$c986","peg$c989","peg$c993","peg$c996","peg$c1000","peg$c1003","peg$c1006","peg$c1009","peg$c1011","peg$c1013","peg$c1015","peg$c1017","peg$c1019","peg$c1021","peg$c1023","peg$c1025","peg$c1027","peg$c1029","peg$c1031","peg$c1033","peg$c1035","peg$c1037","peg$c1038","peg$c1039","peg$c1054","lb","rb","peg$c1056","peg$c1063","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s1","s3","s4","s5","s6","s7","s8","peg$parsestart_item","peg$parse__","peg$parseKW_GO","cur","item","peg$c0","s2","peg$parsecrud_stmt","peg$parseSEMICOLON","headAst","peg$c2","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parseif_exists","peg$parsetable_ref_list","tt","substr","peg$parseident","peg$c91","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","peg$c92","peg$parseKW_VIEW","peg$c93","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseif_not_exists_stmt","peg$parsecreate_table_definition","peg$parsetable_option","peg$parseCOMMA","peg$parsetable_options","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","to","ir","qe","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$c23","peg$parsecreate_like_table_simple","peg$parseLPAREN","peg$parseRPAREN","lt","peg$c22","peg$parsecreate_table_stmt","s21","s23","s24","s25","s26","s27","s28","s29","s30","peg$parseKW_UNIQUE","peg$parseKW_CLUSTERED","peg$parseKW_NONCLUSTERED","peg$parsecolumn_order_list","peg$parsecolumn_list","peg$parseinclude_column","peg$parsewhere_clause","peg$parseKW_WITH","peg$parseindex_options_list","peg$parseon_clause","kw","ta","cols","w","wr","fo","with","peg$parsecreate_index_stmt","peg$parseident_start","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parseident_name","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parseproc_func_call","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","s10","s12","peg$parsecolumn_ref_list","peg$parseview_attribute","peg$parseview_attribute_list","peg$parseselect_stmt_nake","peg$parseview_with","peg$parsealter_view_stmt","peg$parsealter_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parseKW_TABLES","peg$parselock_table","peg$parselock_table_list","ltl","peg$parselock_stmt","peg$parseKW_UNLOCK","peg$parseunlock_stmt","peg$parseKW_DECLARE","peg$parsedeclare_var","peg$parsedeclare_var_list","dl","peg$parseKW_VAR__PRE_AT","peg$parsedeclare_stmt","peg$parseexec_variable","peg$parseexec_varibale_list","v","peg$parseexec_stmt","s14","peg$parseexpr","peg$parseKW_ELSE","ie","ia","g","el","es","peg$parseif_else_stmt","peg$parsewith_clause","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","dbObj","queryTableAlias","peg$c402","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parseinsert_value_clause","ri","row","idx","peg$c410","peg$parsereplace_insert_stmt","ig","it","peg$c411","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","peg$c403","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseselect_stmt","peg$parseorder_by_clause","peg$parselimit_clause","ob","peg$c5","peg$parsecolumn_order_item","peg$parseLBRAKE","peg$parseRBRAKE","peg$parseKW_ASC","peg$parseKW_DESC","peg$c9","peg$parsecolumn_order","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parsecreate_definition","peg$parsecreate_constraint_definition","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parsecolumn_definition_opt","peg$parseKW_NOT_NULL","peg$parseliteral_not_null","peg$parseliteral_null","peg$parseKW_DEFAULT","peg$parseliteral","peg$parsedefault_expr","peg$parsecreate_constraint_check","peg$c33","peg$c36","peg$parseliteral_numeric","peg$parseidentity_stmt","peg$parsekeyword_comment","peg$parseKW_COLLATE","peg$parseKW_ASSIGIN_EQUAL","peg$parsecollate_expr","peg$parsecolumn_format","peg$parsestorage","peg$parsereference_definition","peg$parsecreate_option_character_set_kw","peg$c43","cdo","peg$parsedata_type","peg$c44","peg$parsecolumn_definition_opt_list","peg$c46","peg$c71","peg$parseKW_ADD","peg$parseALTER_ADD_CONSTRAINT","peg$parseKW_CONSTRAINT","peg$parseALTER_DROP_CONSTRAINT","peg$parseALTER_ENABLE_CONSTRAINT","peg$parseALTER_DISABLE_CONSTRAINT","peg$parseKW_COLUMN","kc","cd","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","id","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","tn","peg$parseALTER_RENAME_TABLE","peg$parseKW_KEY","peg$parsecolumn","peg$parseindex_type","peg$parsecte_column_definition","peg$parseindex_options","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","peg$parseconstraint_name","peg$c141","peg$parsecreate_with_index_options","de","peg$parsecreate_constraint_primary","u","peg$parsecreate_constraint_unique","peg$parsecreate_constraint_foreign","nfr","peg$parseor_and_where_expr","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","ro","peg$parseKW_CURRENT_TIMESTAMP","peg$parseexpr_list","peg$parsereference_option","peg$parseKW_COMMENT","peg$parseliteral_string","peg$c202","peg$c211","peg$c214","peg$parsetable_base","peg$parselock_type","peg$parsecte_definition","peg$parseKW_RECURSIVE","peg$parsecolumn_ref_index","s16","s18","s20","s22","opts","h","fx","peg$parseKW_SELECT","peg$parse___","peg$parsequery_option","peg$c250","peg$parseoption_clause","peg$parseKW_TOP","peg$parsenumber","peg$c249","peg$parsetop_clause","peg$parseKW_DISTINCT","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$c398","peg$parsefor_xml_item","peg$parsefor_xml","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c252","peg$parseDOT","tbl","peg$c253","peg$parseKW_AND","peg$parseKW_OR","peg$parseLOGIC_OPERATOR","peg$c423","peg$parsebinary_column_expr","peg$parsealias_clause","peg$parsevalue_alias_clause","peg$c467","peg$parsequoted_ident","peg$parsealias_ident","peg$parseKW_FROM","peg$parseKW_PIVOT","peg$parseaggr_func","peg$parsepivot_unpivot_common_clause","peg$parseKW_UNPIVOT","peg$c260","peg$parsepivot_operator","peg$parsein_op_right","peg$parseKW_USING","peg$parseindex_option","peg$c268","peg$parsepartition_number_expression","peg$parseon_partition","peg$parsepartition_number_expression_list","peg$parseKW_KEY_BLOCK_SIZE","peg$parseKW_OFF","peg$c312","peg$c319","peg$parsetable_ref","peg$parsejoin_op","peg$parseident_name_list","il","peg$c323","peg$c324","peg$parsetable_join","peg$parsetable_hint_item","peg$c334","peg$c369","peg$parsetable_hint","peg$parsetable_hint_item_list","th","peg$parseKW_DUAL","peg$parsevalue_clause","peg$c373","peg$c374","peg$parseKW_LEFT","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c377","peg$c379","peg$c380","peg$parsevar_decl","peg$parseor_and_expr","peg$c382","peg$parseKW_WHERE","peg$parseliteral_list","peg$parsepartition_by_clause","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","peg$c388","peg$parsecolumn_without_kw","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c407","peg$parsevalue_item","peg$parseKW_INSERT","peg$parsevalue_list","peg$c415","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parsecase_when_then_list","peg$parsecase_when_then","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parsecase_else","peg$parse_expr","peg$parseprimary","peg$parsecomparison_op_right","rh","logicExpr","peg$c421","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$c424","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseexists_op","peg$parseexists_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parseKW_BETWEEN","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c446","peg$parseis_op_right","peg$parselike_op","peg$parselike_op_right","peg$parsein_op","peg$parseKW_IN","peg$c450","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c534","peg$c535","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c536","peg$parsecast_expr","peg$parsescalar_time_func","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parsescalar_func","peg$parseover_partition","peg$parseon_update_current_timestamp","peg$parseproc_func_name","bc","peg$c532","peg$parsefunc_call","condition_list","otherwise","peg$parseKW_CASE","peg$parseKW_END","peg$c418","peg$parsecase_expr","peg$c464","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsebrackets_quoted_ident","peg$parsecolumn_name","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","peg$c527","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c499","peg$parseas_window_specification","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parsewindow_frame_bound","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_TIME","peg$parseKW_DATE","peg$parseKW_TIMESTAMP","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$parseKW_NULL","peg$c544","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c596","exp","peg$c597","peg$c598","peg$parsedigits","peg$parsedigit","digit","peg$c600","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NVARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_REAL","peg$parseKW_DOUBLE","peg$parseKW_DATETIME2","peg$parseKW_DATETIMEOFFSET","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parseblock_comment","peg$parsechar","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseproc_primary_list","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1046","peg$c1048","peg$c1053","peg$parsemem_chain","peg$parseKW_NCHAR","peg$c1057","peg$parsecharacter_string_type","peg$parsenumeric_type_suffix","peg$c1060","peg$parseKW_BIT","peg$parseKW_MONEY","peg$parseKW_SMALLMONEY","peg$c1061","peg$parsenumeric_type","peg$parseKW_SMALLDATETIME","peg$parsedatetime_type","peg$parseKW_JSON","peg$parsejson_type","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parsetext_type","peg$parseKW_UNIQUEIDENTIFIER","peg$parseuniqueidentifier_type","peg$parseKW_ZEROFILL","un","ze","peg$c1058","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","newColumnsList","Set","self","NodeSQLParser","util","global","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","valueOf","neg","out","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"transactsql.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","import { columnToSQL, columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database     : PARSER_NAME || 'mysql',\n  type         : 'table',\n  parseOptions : {},\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent, parentheses } = opt\n  const val = parentheses ? `(${value})` : value\n  const prefix = `TOP ${val}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n    case 'snowflake':\n    case 'noql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  if (ident === '*') return ident\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n    case 'snowflake':\n    case 'noql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  let { prefix } = literal\n  const { type, parentheses, suffix, value } = literal\n  let str = typeof literal === 'string' ? literal : value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'full_hex_string':\n      str = `0x${escape(value)}`\n      break\n    case 'natural_string':\n      str = `N'${escape(value)}'`\n      break\n    case 'bit_string':\n      str = `b'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `${prefix || ':'}${value}`\n      prefix = null\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix) result.push(typeof suffix === 'object' && suffix.collate ? commonTypeValue(suffix.collate).join(' ') : toUpper(suffix))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: eventKw, args } = event\n    const result = [toUpper(eventKw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncrementToSQL(autoIncrement) {\n  if (!autoIncrement) return\n  if (typeof autoIncrement === 'string') {\n    const { database } = getParserOpt()\n    switch (database && database.toLowerCase()) {\n      case 'sqlite':\n        return 'AUTOINCREMENT'\n      default:\n        return 'AUTO_INCREMENT'\n    }\n  }\n  const { keyword, seed, increment, parentheses } = autoIncrement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncrementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  getParserOpt, identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  const result = Array.isArray(exprList) ? exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ') : exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL, hasVal } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnDefinitionToSQL, columnRefToSQL, fullTextSearchToSQL } from './column'\nimport { anyValueFuncToSQL, castToSQL, extractFunToSQL, flattenFunToSQL, funcToSQL, tablefuncFunToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { jsonExprToSQL } from './json'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { tablesToSQL, unnestToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter             : alterExprToSQL,\n  aggr_func         : aggrToSQL,\n  any_value         : anyValueFuncToSQL,\n  window_func       : windowFuncToSQL,\n  'array'           : arrayStructExprToSQL,\n  assign            : assignToSQL,\n  binary_expr       : binaryToSQL,\n  case              : caseToSQL,\n  cast              : castToSQL,\n  column_ref        : columnRefToSQL,\n  column_definition : columnDefinitionToSQL,\n  datatype          : dataTypeToSQL,\n  extract           : extractFunToSQL,\n  flatten           : flattenFunToSQL,\n  fulltext_search   : fullTextSearchToSQL,\n  function          : funcToSQL,\n  insert            : unionToSQL,\n  interval          : intervalToSQL,\n  json              : jsonExprToSQL,\n  show              : showToSQL,\n  struct            : arrayStructExprToSQL,\n  tablefunc         : tablefuncFunToSQL,\n  tables            : tablesToSQL,\n  unnest            : unnestToSQL,\n  'window'          : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, quoted, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return [quoted, val.join(' '), quoted].filter(hasVal).join('')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+' || operator === '~' || operator === '!') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => [exprToSQL(info.expr), info.type || 'ASC', toUpper(info.nulls)].filter(hasVal).join(' '))\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n    default:\n      expressions = expr.map(info => exprToSQL(info.expr))\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, filter, over, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  const separator = ' '\n  if (args.distinct) str = ['DISTINCT', str].join(separator)\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (args.separator) str = [str, toUpper(args.separator.keyword), literalToSQL(args.separator.value)].filter(hasVal).join(' ')\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  const filterStr = filter ? `FILTER (WHERE ${exprToSQL(filter.where)})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr, filterStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const { args: conditions, expr: exprItem, parentheses } = expr\n  if (exprItem) res.push(exprToSQL(exprItem))\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n  res.push('END')\n  return parentheses ? `(${res.join(' ')})` : res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { toUpper } from './util'\n\nfunction jsonExprToSQL(expr) {\n  const { keyword, expr_list: exprList } = expr\n  const result = [toUpper(keyword), exprList.map(exprItem => exprToSQL(exprItem)).join(', ')].join(' ')\n  return result\n}\n\nexport {\n  jsonExprToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { intervalToSQL } from './interval'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n    case 'unpivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableHintToSQL(tableHintExpr) {\n  if (!tableHintExpr) return\n  const { keyword, expr, index, index_columns, parentheses, prefix } = tableHintExpr\n  const result = []\n  switch (keyword.toLowerCase()) {\n    case 'forceseek':\n      result.push(toUpper(keyword), `(${identifierToSql(index)}`, `(${index_columns.map(exprToSQL).filter(hasVal).join(', ')}))`)\n      break\n    case 'spatial_window_max_cells':\n      result.push(toUpper(keyword), '=', exprToSQL(expr))\n      break\n    case 'index':\n      result.push(toUpper(prefix), toUpper(keyword), parentheses ? `(${expr.map(identifierToSql).join(', ')})` : `= ${identifierToSql(expr)}`)\n      break\n    default:\n      result.push(exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableTumbleToSQL(tumble) {\n  if (!tumble) return ''\n  const { data: tableInfo, timecol, size } = tumble\n  const fullTableName = [identifierToSql(tableInfo.db), identifierToSql(tableInfo.table)].filter(hasVal).join('.')\n  const result = ['TABLE(TUMBLE(TABLE', fullTableName, `DESCRIPTOR(${columnRefToSQL(timecol)})`, `${intervalToSQL(size)}))`]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, prefix: prefixStr, schema, server, tablesample, table_hint } = tableInfo\n  const serverName = identifierToSql(server)\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr) {\n    const exprType = expr.type\n    switch (exprType) {\n      case 'values':\n        const { parentheses, values, prefix } = expr\n        const valueSQL = [parentheses && '(', '', parentheses && ')']\n        let valuesExpr = valuesToSQL(values)\n        if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n        valueSQL[1] = `VALUES ${valuesExpr}`\n        tableName = valueSQL.filter(hasVal).join('')\n        break\n      case 'tumble':\n        tableName = tableTumbleToSQL(expr)\n        break\n      default:\n        tableName = exprToSQL(expr)\n    }\n  }\n  tableName = [toUpper(prefixStr), tableName].filter(hasVal).join(' ')\n  let str = [serverName, database, schemaStr, tableName].filter(hasVal).join('.')\n  if (tableInfo.parentheses) str = `(${str})`\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = ['TABLESAMPLE', exprToSQL(tablesample.expr), literalToSQL(tablesample.repeatable)].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  result.push(commonOptionConnector('AS', identifierToSql, as), operatorToSQL(operator))\n  if (table_hint) result.push(toUpper(table_hint.keyword), `(${table_hint.expr.map(tableHintToSQL).filter(hasVal).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  if (!Array.isArray(tables)) {\n    const { expr, parentheses } = tables\n    const sql = tablesToSQL(expr)\n    if (parentheses) return `(${sql})`\n    return sql\n  }\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${toUpper(join)}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  let val = value\n  switch (keyword) {\n    case 'partition by':\n    case 'default collate':\n      val = exprToSQL(value)\n      break\n    case 'options':\n      val = `(${value.map(tableOptionItem => [tableOptionItem.keyword, tableOptionItem.symbol, exprToSQL(tableOptionItem.value)].join(' ')).join(', ')})`\n      break\n    case 'cluster by':\n      val = value.map(exprToSQL).join(', ')\n      break\n  }\n  sql.push(val)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tableHintToSQL,\n  tableTumbleToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncrementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  getParserOpt,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  const offsetExpr = offset && offset.map(offsetItem => ['[', offsetItem.name, `${offsetItem.name ? '(' : ''}`, literalToSQL(offsetItem.value), `${offsetItem.name ? ')' : ''}`, ']'].filter(hasVal).join('')).join('')\n  return [exprToSQL(expr), offsetExpr, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrows = [], as, collate, column, db, isDual, schema, table, parentheses, properties,\n    suffix, order_by, subFields = [],\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  const prefix = [schema, db, table].filter(hasVal).map(val => `${identifierToSql(val)}`).join('.')\n  if (prefix) str = `${prefix}.${str}`\n  if (array_index) {\n    str = `${str}[${literalToSQL(array_index.index)}]`\n    if (array_index.property) str = `${str}.${literalToSQL(array_index.property)}`\n  }\n  str = [str, ...subFields].join('.')\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' '),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  result.push(toUpper(order_by))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_action: onAction,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(col => exprToSQL(col)).join(', ')})`)\n  reference.push(toUpper(match))\n  onAction.map(onRef => reference.push(toUpper(onRef.type), exprToSQL(onRef.value)))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique: uniqueKey,\n    primary_key: primaryKey,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  const { database } = getParserOpt()\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncrementToSQL(autoIncrement), toUpper(primaryKey), toUpper(uniqueKey), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  if (database !== 'sqlite') columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order_by } = columnOrder\n  const result = [\n    exprToSQL(typeof column === 'string' ? { type: 'column_ref', table: columnOrder.table, column } : columnOrder),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order_by),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction generatedExpressionToSQL(generated) {\n  if (!generated) return\n  const result = [toUpper(generated.value), `(${exprToSQL(generated.expr)})`, toUpper(generated.storage_type)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  const generated = generatedExpressionToSQL(columnDefinition.generated)\n  column.push(generated)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction asToSQL(asStr) {\n  if (!asStr) return ''\n  return ['AS', /^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(asStr) ? identifierToSql(asStr) : columnIdentifierToSql(asStr)].join(' ')\n}\n\nfunction fullTextSearchToSQL(expr) {\n  const { against, as, columns, match, mode } = expr\n  const matchExpr = [toUpper(match), `(${columns.map(col => columnRefToSQL(col)).join(', ')})`].join(' ')\n  const againstExpr = [toUpper(against), ['(', exprToSQL(expr.expr), mode && ` ${literalToSQL(mode)}`, ')'].filter(hasVal).join('')].join(' ')\n  return [matchExpr, againstExpr, asToSQL(as)].filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  const { expr_list: exprList } = column\n  if (exprList) {\n    const result = [str]\n    const columnsStr = exprList.map(col => columnToSQL(col, isDual)).join(', ')\n    result.push([toUpper(type), type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n    return result.filter(hasVal).join(' ')\n  }\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${literalToSQL(expr.array_index.index)}]`\n  return [str, asToSQL(column.as)].filter(hasVal).join(' ')\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  return columns.map(col => columnToSQL(col, isDual)).join(', ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n  fullTextSearchToSQL,\n}\n","import { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { commonTypeValue, identifierToSql, hasVal, toUpper, literalToSQL } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport astToSQL from './sql'\nimport { multipleToSQL } from './union'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name, prefix } = stmt\n  const clauses = [toUpper(type), toUpper(keyword), toUpper(prefix)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'trigger':\n      clauses.push([name[0].schema ? `${identifierToSql(name[0].schema)}.` : '', identifierToSql(name[0].trigger)].filter(hasVal).join(''))\n      break\n    case 'database':\n    case 'schema':\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'view':\n      clauses.push(tablesToSQL(name), stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    case 'index':\n      clauses.push(columnRefToSQL(name), ...stmt.table ? ['ON', tableToSQL(stmt.table)] : [], stmt.options && stmt.options.map(exprToSQL).filter(hasVal).join(' '))\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction executeToSQL(stmt) {\n  const { type, name, args } = stmt\n  const sql = [toUpper(type)]\n  const nameWithArgs = [name]\n  if (args) nameWithArgs.push(`(${exprToSQL(args).join(', ')})`)\n  sql.push(nameWithArgs.join(''))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction forLoopToSQL(stmt) {\n  const { type, label, target, query, stmts } = stmt\n  const sql = [label, toUpper(type), target, 'IN', multipleToSQL([query]), 'LOOP', multipleToSQL(stmts), 'END LOOP', label]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction raiseToSQL(stmt) {\n  const { type, level, raise, using } = stmt\n  const sql = [toUpper(type), toUpper(level)]\n  if (raise) sql.push([literalToSQL(raise.keyword), raise.type === 'format' && raise.expr.length > 0 && ','].filter(hasVal).join(''), raise.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  if (using) sql.push(toUpper(using.type), toUpper(using.option), using.symbol, using.expr.map(exprInfo => exprToSQL(exprInfo)).join(', '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction deallocateToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  return [toUpper(type), toUpper(keyword), exprToSQL(expr)].filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare, symbol } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, constant, datatype, not_null, prefix, definition, keyword } = dec\n    const declareInfo = [[at, name].filter(hasVal).join(''), toUpper(as), toUpper(constant)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(datatype), ...commonTypeValue(dec.collate), toUpper(not_null))\n        if (definition) declareInfo.push(toUpper(definition.keyword), exprToSQL(definition.value))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(`${symbol} `)\n  result.push(info)\n  return result.join(' ')\n}\n\nfunction ifToSQL(stmt) {\n  const {\n    boolean_expr: boolExpr,\n    else_expr: elseExpr,\n    elseif_expr: elseifExpr,\n    if_expr: ifExpr,\n    prefix,\n    go,\n    semicolons,\n    suffix,\n    type,\n  } = stmt\n  const result = [toUpper(type), exprToSQL(boolExpr), literalToSQL(prefix), `${astToSQL(ifExpr.ast || ifExpr)}${semicolons[0]}`, toUpper(go)]\n  if (elseifExpr) {\n    result.push(\n      elseifExpr.map(\n        elseif => [toUpper(elseif.type), exprToSQL(elseif.boolean_expr), 'THEN', astToSQL(elseif.then.ast || elseif.then), elseif.semicolon].filter(hasVal).join(' ')\n      ).join(' ')\n    )\n  }\n  if (elseExpr) result.push('ELSE', `${astToSQL(elseExpr.ast || elseExpr)}${semicolons[1]}`)\n  result.push(literalToSQL(suffix))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction grantUserOrRoleToSQL(stmt) {\n  const { name, host } = stmt\n  const result = [literalToSQL(name)]\n  if (host) result.push('@', literalToSQL(host))\n  return result.join('')\n}\n\nfunction grantAndRevokeToSQL(stmt) {\n  const { type, grant_option_for, keyword, objects, on, to_from, user_or_roles, with: withOpt } = stmt\n  const result = [toUpper(type), literalToSQL(grant_option_for)]\n  const objStr = objects.map(obj => {\n    const { priv, columns } = obj\n    const privSQL = [exprToSQL(priv)]\n    if (columns) privSQL.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n    return privSQL.join(' ')\n  }).join(', ')\n  result.push(objStr)\n  if (on) {\n    result.push('ON')\n    switch (keyword) {\n      case 'priv':\n        result.push(\n          literalToSQL(on.object_type),\n          on.priv_level.map(privLevel => [identifierToSql(privLevel.prefix), identifierToSql(privLevel.name)].filter(hasVal).join('.')).join(', ')\n        )\n        break\n      case 'proxy':\n        result.push(grantUserOrRoleToSQL(on))\n        break\n    }\n  }\n  result.push(toUpper(to_from), user_or_roles.map(grantUserOrRoleToSQL).join(', '))\n  result.push(literalToSQL(withOpt))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  grantUserOrRoleToSQL,\n  ifToSQL,\n  raiseToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    (parameters || []).map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { analyzeToSQL, attachToSQL } from './analyze'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  deallocateToSQL,\n  declareToSQL,\n  descToSQL,\n  executeToSQL,\n  forLoopToSQL,\n  grantAndRevokeToSQL,\n  ifToSQL,\n  useToSQL,\n  raiseToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { procToSQL } from './proc'\nimport { transactionToSQL } from './transaction'\nimport { showToSQL } from './show'\nimport { hasVal, toUpper } from './util'\n\nconst typeToSQLFn = {\n  alter       : alterToSQL,\n  analyze     : analyzeToSQL,\n  attach      : attachToSQL,\n  create      : createToSQL,\n  select      : selectToSQL,\n  deallocate  : deallocateToSQL,\n  delete      : deleteToSQL,\n  exec        : execToSQL,\n  execute     : executeToSQL,\n  for         : forLoopToSQL,\n  update      : updateToSQL,\n  if          : ifToSQL,\n  insert      : insertToSQL,\n  drop        : commonCmdToSQL,\n  truncate    : commonCmdToSQL,\n  replace     : insertToSQL,\n  declare     : declareToSQL,\n  use         : useToSQL,\n  rename      : renameToSQL,\n  call        : callToSQL,\n  desc        : descToSQL,\n  set         : setVarToSQL,\n  lock        : lockUnlockToSQL,\n  unlock      : lockUnlockToSQL,\n  show        : showToSQL,\n  grant       : grantAndRevokeToSQL,\n  revoke      : grantAndRevokeToSQL,\n  proc        : procToSQL,\n  raise       : raiseToSQL,\n  transaction : transactionToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  if (!stmt) return ''\n  const fun = typeToSQLFn[stmt.type]\n  const { _parentheses, _orderby, _limit } = stmt\n  const res = [_parentheses && '(', fun(stmt)]\n  while (stmt._next) {\n    const nextFun = typeToSQLFn[stmt._next.type]\n    const unionKeyword = toUpper(stmt.set_op)\n    res.push(unionKeyword, nextFun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(_parentheses && ')', orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    const astInfo = stmt[i] && stmt[i].ast ? stmt[i].ast : stmt[i]\n    let sql = unionToSQL(astInfo)\n    if (i === len - 1 && astInfo.type === 'transaction') sql = `${sql} ;`\n    res.push(sql)\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\nimport { withToSQL } from './with'\n\nfunction deleteToSQL(stmt) {\n  const { columns, from, table, where, orderby, with: withInfo, limit } = stmt\n  const clauses = [withToSQL(withInfo), 'DELETE']\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { assignToSQL } from './assign'\nimport { exprToSQL } from './expr'\nimport { toUpper } from './util'\n\nfunction returnToSQL(stmt) {\n  const { type, expr } = stmt\n  return [toUpper(type), exprToSQL(expr)].join(' ')\n}\n\nfunction procToSQL(expr) {\n  const { stmt } = expr\n  switch (stmt.type) {\n    case 'assign':\n      return assignToSQL(stmt)\n    case 'return':\n      return returnToSQL(stmt)\n  }\n}\n\nexport {\n  procToSQL,\n  returnToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction transactionToSQL(stmt) {\n  const { expr } = stmt\n  return exprToSQL(expr)\n}\n\nexport {\n  transactionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonOptionConnector, commonTypeValue, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction anyValueFuncToSQL(stmt) {\n  const { args, type, over } = stmt\n  const { expr, having } = args\n  let sql = `${toUpper(type)}(${exprToSQL(expr)}`\n  if (having) sql = `${sql} HAVING ${toUpper(having.prefix)} ${exprToSQL(having.expr)}`\n  sql = `${sql})`\n  const overStr = overToSQL(over)\n  return [sql, overStr].filter(hasVal).join(' ')\n}\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { arrows = [], collate, target, expr: expression, keyword, symbol, as: alias, properties = [] } = expr\n  const { length, dataType, parentheses, quoted, scale, suffix: dataTypeSuffix } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (dataTypeSuffix && dataTypeSuffix.length) str += ` ${dataTypeSuffix.join(' ')}`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `${toUpper(keyword)}(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  suffix += arrows.map((arrow, index) => commonOptionConnector(arrow, literalToSQL, properties[index])).join(' ')\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  const result = [prefix, symbolChar, quoted, dataType, quoted, arrayDimension, str, suffix]\n  return result.filter(hasVal).join('')\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction flattenArgToSQL(arg) {\n  if (!arg) return ''\n  const { type, symbol, value } = arg\n  const result = [toUpper(type), symbol, exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction flattenFunToSQL(stmt) {\n  const { args, type } = stmt\n  const keys = ['input', 'path', 'outer', 'recursive', 'mode']\n  const argsStr = keys.map(key => flattenArgToSQL(args[key])).filter(hasVal).join(', ')\n  return `${toUpper(type)}(${argsStr})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses, parentheses, over, collate, suffix } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  const suffixStr = exprToSQL(suffix)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = expr.separator || ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = [str.join(''), suffixStr].filter(hasVal).join(' ')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nfunction tablefuncFunToSQL(expr) {\n  const { as, name, args } = expr\n  const result = [`${name}(${exprToSQL(args).join(', ')})`, 'AS', funcToSQL(as)]\n  return result.join(' ')\n}\n\nexport {\n  anyValueFuncToSQL,\n  castToSQL,\n  extractFunToSQL,\n  flattenFunToSQL,\n  funcToSQL,\n  tablefuncFunToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL, tableToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { selectToSQL } from './select'\nimport { dataTypeToSQL, hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n    case 'schema':\n      name = identifierToSql(expr[resource])\n      break\n    case 'aggregate':\n    case 'function':\n    case 'domain':\n    case 'type':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n    case 'table-option':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      name = [symbol, expr[resource]].filter(val => val !== null).join(' ')\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name && name.trim(),\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nfunction alterTableToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterViewToSQL(stmt) {\n  const { type, columns, attributes, select, view, with: withExpr } = stmt\n  const action = toUpper(type)\n  const viewName = tableToSQL(view)\n  const result = [action, 'VIEW', viewName]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  if (attributes) result.push(`WITH ${attributes.map(toUpper).join(', ')}`)\n  result.push('AS', selectToSQL(select))\n  if (withExpr) result.push(toUpper(withExpr))\n  return result.filter(hasVal).join(' ')\n}\nfunction alterArgsToSQL(arg) {\n  const defaultSQL = arg.default && [toUpper(arg.default.keyword), exprToSQL(arg.default.value)].join(' ')\n  return [toUpper(arg.mode), arg.name, dataTypeToSQL(arg.type), defaultSQL].filter(hasVal).join(' ')\n}\n\nfunction alterSchemaToSQL(stmt) {\n  const { expr, keyword, schema, type } = stmt\n  const result = [toUpper(type), toUpper(keyword), identifierToSql(schema), alterExprToSQL(expr)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterDomainTypeToSQL(stmt) {\n  const { expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterFunctionToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      args && `(${args.expr ? args.expr.map(alterArgsToSQL).join(', ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterAggregateToSQL(stmt) {\n  const { args, expr, keyword, name, type } = stmt\n  const { expr: argsExpr, orderby } = args\n  const result = [\n    toUpper(type),\n    toUpper(keyword),\n    [\n      [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n      `(${argsExpr.map(alterArgsToSQL).join(', ')}${orderby ? [' ORDER', 'BY', orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''})`,\n    ].filter(hasVal).join(''),\n    alterExprToSQL(expr),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterToSQL(stmt) {\n  const { keyword = 'table' } = stmt\n  switch (keyword) {\n    case 'aggregate':\n      return alterAggregateToSQL(stmt)\n    case 'table':\n      return alterTableToSQL(stmt)\n    case 'schema':\n      return alterSchemaToSQL(stmt)\n    case 'domain':\n    case 'type':\n      return alterDomainTypeToSQL(stmt)\n    case 'function':\n      return alterFunctionToSQL(stmt)\n    case 'view':\n      return alterViewToSQL(stmt)\n  }\n}\n\nexport {\n  alterArgsToSQL,\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), toUpper(type)]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n    on, with: withExpr,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => exprToSQL(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  if (withExpr) dataType.push(`WITH (${indexOptionListToSQL(withExpr).join(', ')})`)\n  if (on) dataType.push(`ON [${on}]`)\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const { keyword, index } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction forXmlToSQL(stmt) {\n  if (!stmt) return\n  const { expr, keyword, type } = stmt\n  const result = [toUpper(type), toUpper(keyword)]\n  if (!expr) return result.join(' ')\n  return `${result.join(' ')}(${exprToSQL(expr)})`\n}\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    for: forXml,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    locking_read: lockingRead,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    qualify,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('QUALIFY', exprToSQL, qualify))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(lockingRead))\n  if (position === 'end') clauses.push(intoSQL)\n  clauses.push(forXmlToSQL(forXml))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\nimport { withToSQL } from './with'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { from, table, set, where, orderby, with: withInfo, limit, returning } = stmt\n  const clauses = [\n    withToSQL(withInfo),\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type, parentheses } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr) || []\n    if (parentheses) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.map(columnRefToSQL).join(', ')})` : ''\n    return `${name.type === 'default' ? identifierToSql(name.value) : literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { alterArgsToSQL, alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { grantUserOrRoleToSQL } from './command'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { setToSQL } from './update'\nimport { multipleToSQL, unionToSQL } from './union'\nimport {\n  columnIdentifierToSql,\n  columnOrderListToSQL,\n  commonOptionConnector,\n  commonKeywordArgsToSQL,\n  commentToSQL,\n  commonTypeValue,\n  dataTypeToSQL,\n  toUpper,\n  hasVal,\n  identifierToSql,\n  triggerEventToSQL,\n  literalToSQL,\n} from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    or_replace: orReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(orReplace), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    definer, for_each: forEach, keyword,\n    execute: triggerBody,\n    type, table, if_not_exists: ife,\n    temporary, trigger, events: triggerEvents,\n    order: triggerOrder, time: triggerTime, when,\n  } = stmt\n  const sql = [\n    toUpper(type), toUpper(temporary), definer, toUpper(keyword),\n    toUpper(ife), tableToSQL(trigger),\n    toUpper(triggerTime),\n    triggerEvents.map(event => {\n      const eventStr = [toUpper(event.keyword)]\n      const { args } = event\n      if (args) eventStr.push(toUpper(args.keyword), args.columns.map(columnRefToSQL).join(', '))\n      return eventStr.join(' ')\n    }),\n    'ON', tableToSQL(table), toUpper(forEach && forEach.keyword), toUpper(forEach && forEach.args),\n    triggerOrder && `${toUpper(triggerOrder.keyword)} ${identifierToSql(triggerOrder.trigger)}`,\n    commonOptionConnector('WHEN', exprToSQL, when),\n    toUpper(triggerBody.prefix),\n  ]\n  switch (triggerBody.type) {\n    case 'set':\n      sql.push(commonOptionConnector('SET', setToSQL, triggerBody.expr))\n      break\n    case 'multiple':\n      sql.push(multipleToSQL(triggerBody.expr.ast))\n      break\n  }\n  sql.push(toUpper(triggerBody.suffix))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createConstraintTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    or,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(or), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, if_not_exists: ifNotExists, keyword,\n    recursive, replace, select, sql_security: sqlSecurity,\n    temporary, type, view, with: withClause, with_options: withOptions,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    toUpper(temporary),\n    toUpper(recursive),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    withOptions && ['WITH', `(${withOptions.map(withOpt => commonTypeValue(withOpt).join(' ')).join(', ')})`].join(' '),\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDomainToSQL(stmt) {\n  const {\n    as, domain, type, keyword, target,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(domain.schema), identifierToSql(domain.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    dataTypeToSQL(target),\n  ]\n  if (createDefinition && createDefinition.length > 0) {\n    const definitionSQL = []\n    for (const definition of createDefinition) {\n      const definitionType = definition.type\n      switch (definitionType) {\n        case 'collate':\n          definitionSQL.push(commonTypeValue(definition).join(' '))\n          break\n        case 'default':\n          definitionSQL.push(toUpper(definitionType), exprToSQL(definition.value))\n          break\n        case 'constraint':\n          definitionSQL.push(constraintDefinitionToSQL(definition))\n          break\n      }\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTypeToSQL(stmt) {\n  const { as, create_definitions: createDefinition, keyword, name, resource, type } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    [identifierToSql(name.schema), identifierToSql(name.name)].filter(hasVal).join('.'),\n    toUpper(as),\n    toUpper(resource),\n  ]\n  if (createDefinition) {\n    const definitionSQL = []\n    switch (resource) {\n      case 'enum':\n        definitionSQL.push(exprToSQL(createDefinition))\n        break\n    }\n    sql.push(definitionSQL.filter(hasVal).join(' '))\n  }\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createFunctionReturnsOptToSQL(stmt) {\n  if (stmt.dataType) return dataTypeToSQL(stmt)\n  return [identifierToSql(stmt.db), identifierToSql(stmt.schema), identifierToSql(stmt.table)].filter(hasVal).join('.')\n}\n\nfunction createFunctionReturnsToSQL(stmt) {\n  const { type, keyword, expr } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    Array.isArray(expr) ? `(${expr.map(columnDefinitionToSQL).join(', ')})` : createFunctionReturnsOptToSQL(expr),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\nfunction createFunctionOptionToSQL(stmt) {\n  const { type } = stmt\n  switch (type) {\n    case 'as':\n      return [toUpper(type), stmt.symbol, unionToSQL(stmt.declare), toUpper(stmt.begin), multipleToSQL(stmt.expr), toUpper(stmt.end), stmt.symbol].filter(hasVal).join(' ')\n    case 'set':\n      return [toUpper(type), stmt.parameter, toUpper(stmt.value && stmt.value.prefix), stmt.value && stmt.value.expr.map(exprToSQL).join(', ')].filter(hasVal).join(' ')\n    default:\n      return exprToSQL(stmt)\n  }\n}\nfunction createFunctionToSQL(stmt) {\n  const { type, replace, keyword, name, args, returns, options, last } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = args.map(alterArgsToSQL).filter(hasVal).join(', ')\n  sql.push(`${functionName}(${argsSQL})`, createFunctionReturnsToSQL(returns), options.map(createFunctionOptionToSQL).join(' '), last)\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction aggregateOptionToSQL(stmt) {\n  const { type, symbol, value } = stmt\n  const sql = [toUpper(type), symbol]\n  switch (toUpper(type)) {\n    case 'SFUNC':\n      sql.push([identifierToSql(value.schema), value.name].filter(hasVal).join('.'))\n      break\n    case 'STYPE':\n    case 'MSTYPE':\n      sql.push(dataTypeToSQL(value))\n      break\n    default:\n      sql.push(exprToSQL(value))\n      break\n  }\n  return sql.filter(hasVal).join(' ')\n}\nfunction createAggregateToSQL(stmt) {\n  const { type, replace, keyword, name, args, options } = stmt\n  const sql = [toUpper(type), toUpper(replace), toUpper(keyword)]\n  const functionName = [identifierToSql(name.schema), name.name].filter(hasVal).join('.')\n  const argsSQL = `${args.expr.map(alterArgsToSQL).join(', ')}${args.orderby ? [' ORDER', 'BY', args.orderby.map(alterArgsToSQL).join(', ')].join(' ') : ''}`\n  sql.push(`${functionName}(${argsSQL})`, `(${options.map(aggregateOptionToSQL).join(', ')})`)\n  return sql.filter(hasVal).join(' ')\n}\nfunction createUserToSQL(stmt) {\n  const {\n    attribute, comment, default_role: defaultRole, if_not_exists: ifNotExists, keyword, lock_option: lockOption,\n    password_options: passwordOptions, require: requireOption, resource_options: resourceOptions, type, user,\n  } = stmt\n  const userAuthOptions = user.map(userAuthOption => {\n    const { user: userInfo, auth_option } = userAuthOption\n    const result = [grantUserOrRoleToSQL(userInfo)]\n    if (auth_option) result.push(toUpper(auth_option.keyword), auth_option.auth_plugin, literalToSQL(auth_option.value))\n    return result.filter(hasVal).join(' ')\n  }).join(', ')\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    userAuthOptions,\n  ]\n  if (defaultRole) sql.push(toUpper(defaultRole.keyword), defaultRole.value.map(grantUserOrRoleToSQL).join(', '))\n  sql.push(commonOptionConnector(requireOption && requireOption.keyword, exprToSQL, requireOption && requireOption.value))\n  if (resourceOptions) sql.push(toUpper(resourceOptions.keyword), resourceOptions.value.map(resourceOption => exprToSQL(resourceOption)).join(' '))\n  if (passwordOptions) passwordOptions.forEach(passwordOption => sql.push(commonOptionConnector(passwordOption.keyword, exprToSQL, passwordOption.value)))\n  sql.push(literalToSQL(lockOption), commentToSQL(comment), literalToSQL(attribute))\n  return sql.filter(hasVal).join(' ')\n}\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'aggregate':\n      sql = createAggregateToSQL(stmt)\n      break\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = stmt.resource === 'constraint' ? createConstraintTriggerToSQL(stmt) : createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'function':\n      sql = createFunctionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    case 'domain':\n      sql = createDomainToSQL(stmt)\n      break\n    case 'type':\n      sql = createTypeToSQL(stmt)\n      break\n    case 'user':\n      sql = createUserToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { unionToSQL, multipleToSQL } from './union'\n\nconst supportedTypes = ['analyze', 'attach', 'select', 'deallocate', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'declare', 'show', 'replace', 'if', 'grant', 'revoke', 'proc', 'raise', 'execute', 'transaction']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!supportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  const sql = ast.go === 'go' ? goToSQL(ast) : toSQL(ast)\n  return sql\n}\n","import {\n  identifierToSql,\n  getParserOpt,\n  hasVal,\n  toUpper,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  const { database } = getParserOpt()\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  let constraintTypeStr = toUpper(constraintType)\n  if (database === 'sqlite' && constraintTypeStr === 'UNIQUE KEY') constraintTypeStr = 'UNIQUE'\n  constraintSQL.push(constraintTypeStr)\n  constraintSQL.push(database !== 'sqlite' && identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { columnRefToSQL } from './column'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL, literalToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction conflictTargetToSQL(conflictTarget) {\n  if (!conflictTarget) return ''\n  const { type } = conflictTarget\n  switch (type) {\n    case 'column':\n      return `(${conflictTarget.expr.map(columnRefToSQL).join(', ')})`\n  }\n}\n\nfunction conflictActionToSQL(conflictAction) {\n  const { expr, keyword } = conflictAction\n  const { type } = expr\n  const result = [toUpper(keyword)]\n  switch (type) {\n    case 'origin':\n      result.push(literalToSQL(expr))\n      break\n    case 'update':\n      result.push('UPDATE', commonOptionConnector('SET', setToSQL, expr.set), commonOptionConnector('WHERE', exprToSQL, expr.where))\n      break\n  }\n  return result.filter(hasVal).join(' ')\n}\n\nfunction conflictToSQL(conflict) {\n  if (!conflict) return ''\n  const { action, target } = conflict\n  const result = [conflictTargetToSQL(target), conflictActionToSQL(action)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    conflict,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('ON CONFLICT', conflictToSQL, conflict))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  conflictToSQL,\n  insertToSQL,\n  valuesToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, toUpper } from './util'\n\nfunction binaryToSQL(expr) {\n  let operator = expr.operator || expr.op\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const escape = expr.right.escape || {}\n  const str = [exprToSQL(expr.left), operator, rstr, toUpper(escape.type), exprToSQL(escape.value)].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL, varToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tableToSQL, tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  let { keyword } = showExpr\n  const { suffix } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'COLUMNS':\n    case 'INDEXES':\n      str = commonOptionConnector('FROM', tablesToSQL, showExpr.from)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    case 'CREATE':\n      str = commonOptionConnector('', tableToSQL, showExpr[suffix])\n      break\n    case 'VAR':\n      str = varToSQL(showExpr.var)\n      keyword = ''\n      break\n    default:\n      break\n  }\n  return ['SHOW', toUpper(keyword), toUpper(suffix), str].filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { exprToSQL } from './expr'\nimport parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  exprToSQL(expr, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return exprToSQL(expr)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim(), opt.parseOptions || DEFAULT_OPT.parseOptions)\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(head, tail) {\n          if (!tail || tail.length === 0) return head\n          delete head.tableList\n          delete head.columnList\n          let cur = head\n          for (let i = 0; i < tail.length; i++) {\n            const item = tail[i][3] || []\n            delete item.tableList\n            delete item.columnList\n            cur.go_next = item\n            cur.go = 'go'\n            cur = cur.go_next\n          }\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n        },\n      peg$c1 = function(n) {\n          return n\n        },\n      peg$c2 = function(head, tail) {\n            const headAst = head && head.ast || head\n            const cur = tail && tail.length && tail[0].length >= 4 ? [headAst] : headAst;\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c3 = function() { return 'union all' },\n      peg$c4 = function() { return 'union' },\n      peg$c5 = function(head, tail, ob, l) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.set_op = tail[i][1]\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c6 = function(head, tail) {\n          return createList(head, tail)\n        },\n      peg$c7 = function(c, o) { return {\n            ...c,\n            order_by: o.toLowerCase()\n          }\n        },\n      peg$c8 = function(c) { return c },\n      peg$c9 = function(c, o) {\n          return {\n            ...c,\n            order_by: o.toLowerCase()\n          }\n        },\n      peg$c10 = \"include\",\n      peg$c11 = peg$literalExpectation(\"INCLUDE\", true),\n      peg$c12 = function(k, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            columns:c,\n          }\n        },\n      peg$c13 = \"filestream_on\",\n      peg$c14 = peg$literalExpectation(\"FILESTREAM_ON\", true),\n      peg$c15 = function(a, kw, t, n, on, ta, cols, i, w, wr, op, fo) {\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_columns: cols,\n                include: i,\n                where: w,\n                with: wr && wr[4],\n                on: op,\n                filestream_on: fo && { value: fo[2] },\n              }\n          }\n        },\n      peg$c16 = function(head, tail) {\n          return createList(head, tail, 1)\n        },\n      peg$c17 = \"if\",\n      peg$c18 = peg$literalExpectation(\"IF\", true),\n      peg$c19 = function() {\n          return 'IF NOT EXISTS'\n        },\n      peg$c20 = function(a, k, ife, t, c) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists: ife,\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c21 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife,\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c22 = function(a, tp, ife, t, lt) {\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp[0].toLowerCase(),\n                if_not_exists: ife,\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c23 = function(t) {\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c24 = function(e) {\n            e.parentheses = true;\n            return e;\n        },\n      peg$c25 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c26 = function(n) {\n          if (n && !n.value) n.value = 'null'\n          return { nullable: n }\n        },\n      peg$c27 = function(d) {\n          return { default_val: d }\n        },\n      peg$c28 = function(ch) {\n          return { check: ch }\n        },\n      peg$c29 = \"unique\",\n      peg$c30 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c31 = \"key\",\n      peg$c32 = peg$literalExpectation(\"KEY\", true),\n      peg$c33 = function(k) {\n          const sql = ['unique']\n          if (k) sql.push(k)\n          return { unique: sql.join(' ').toLowerCase('') }\n        },\n      peg$c34 = \"primary\",\n      peg$c35 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c36 = function(p) {\n          const sql = []\n          if (p) sql.push('primary')\n          sql.push('key')\n          return { primary_key: sql.join(' ').toLowerCase('') }\n        },\n      peg$c37 = function(o) {\n          return { auto_increment: o }\n        },\n      peg$c38 = function(co) {\n          return { comment: co }\n        },\n      peg$c39 = function(ca) {\n          return { collate: ca }\n        },\n      peg$c40 = function(cf) {\n          return { column_format: cf }\n        },\n      peg$c41 = function(s) {\n          return { storage: s }\n        },\n      peg$c42 = function(re) {\n          return { reference_definition: re }\n        },\n      peg$c43 = function(t, s, v) {\n          return { character_set: { type: t, value: v, symbol: s }}\n        },\n      peg$c44 = function(head, tail) {\n          let opt = head\n          for (let i = 0; i < tail.length; i++) {\n            opt = { ...opt, ...tail[i][1] }\n          }\n          return opt\n        },\n      peg$c45 = function(c, d, cdo) {\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              resource: 'column',\n              ...(cdo || {})\n            }\n          },\n      peg$c46 = function(c, as) {\n          if (as) c.as = as[2]\n          return {\n            column: c,\n            resource: 'column'\n          }\n        },\n      peg$c47 = \"identity\",\n      peg$c48 = peg$literalExpectation(\"IDENTITY\", true),\n      peg$c49 = function(c) {\n          return {\n            keyword: 'identity',\n            seed:c && c[2],\n            increment:c && c[6],\n            parentheses:c && true || false,\n          }\n        },\n      peg$c50 = function(s, ca) {\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c51 = \"column_format\",\n      peg$c52 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c53 = \"fixed\",\n      peg$c54 = peg$literalExpectation(\"FIXED\", true),\n      peg$c55 = \"dynamic\",\n      peg$c56 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c57 = \"default\",\n      peg$c58 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c59 = function(k, f) {\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c60 = \"storage\",\n      peg$c61 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c62 = \"disk\",\n      peg$c63 = peg$literalExpectation(\"DISK\", true),\n      peg$c64 = \"memory\",\n      peg$c65 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c66 = function(k, s) {\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c67 = function(ce) {\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c68 = function(at, name, as, dt, v) {\n          return {\n            at: '@',\n            name,\n            as: as && as[0].toLowerCase(),\n            datatype: dt,\n            keyword: 'variable',\n            definition: v && {\n              type: 'default',\n              keyword: v[0],\n              value: v[2]\n            }\n          }\n        },\n      peg$c69 = \"cursor\",\n      peg$c70 = peg$literalExpectation(\"CURSOR\", true),\n      peg$c71 = function(at, name) {\n          return {\n            at: '@',\n            name,\n            keyword: 'cursor',\n            prefix: 'cursor',\n          }\n        },\n      peg$c72 = function(a, dl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'declare',\n              declare: dl,\n              symbol: ',',\n            }\n          }\n        },\n      peg$c73 = function(a, at, name, as, t) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'declare',\n              declare: [{\n                at: '@',\n                name,\n                as: as && as[0].toLowerCase(),\n                keyword: 'table',\n                prefix: 'table',\n                definition: t,\n              }]\n            }\n          }\n        },\n      peg$c74 = \"execute\",\n      peg$c75 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c76 = \"exec\",\n      peg$c77 = peg$literalExpectation(\"EXEC\", true),\n      peg$c78 = function(kw, t, v) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'exec',\n              keyword: kw,\n              module: t,\n              parameters: v,\n            }\n          }\n        },\n      peg$c79 = function(head, tail) {\n            return createList(head, tail);\n        },\n      peg$c80 = \"@\",\n      peg$c81 = peg$literalExpectation(\"@\", false),\n      peg$c82 = function(n, e) {\n          return {\n            type: 'variable',\n            name: n,\n            value: e,\n          }\n        },\n      peg$c83 = peg$literalExpectation(\"if\", true),\n      peg$c84 = function(ie, ia, s, g, el, es) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'if',\n              keyword: 'if',\n              boolean_expr: ie,\n              semicolons: [s || '', es || ''],\n              go: g,\n              if_expr: ia,\n              else_expr: el && el[2],\n            }\n          }\n        },\n      peg$c85 = \"exists\",\n      peg$c86 = peg$literalExpectation(\"exists\", true),\n      peg$c87 = function() {\n          return 'if exists'\n        },\n      peg$c88 = function(a, r, ife, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                prefix: ife,\n                name: t\n              }\n            };\n          },\n      peg$c89 = \"procedure\",\n      peg$c90 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c91 = function(a, r, p) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: a.toLowerCase(),\n              keyword: r.toLowerCase(),\n              name: p\n            }\n          }\n        },\n      peg$c92 = function(a, r, i, t, op) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c93 = function(a, r, ife, t) {\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                prefix: ife,\n                name: t,\n              }\n            };\n          },\n      peg$c94 = function(a, kw, t) {\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c95 = function(d) {\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c96 = \"encryption\",\n      peg$c97 = peg$literalExpectation(\"ENCRYPTION\", true),\n      peg$c98 = \"schemabinding\",\n      peg$c99 = peg$literalExpectation(\"SCHEMABINDING\", true),\n      peg$c100 = \"view_metadata\",\n      peg$c101 = peg$literalExpectation(\"VIEW_METADATA\", true),\n      peg$c102 = \"check\",\n      peg$c103 = peg$literalExpectation(\"CHECK\", true),\n      peg$c104 = \"option\",\n      peg$c105 = peg$literalExpectation(\"OPTION\", true),\n      peg$c106 = function() {\n          return 'with check option'\n        },\n      peg$c107 = function(t, c, w, s, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                keyword: 'view',\n                view: t,\n                columns: c && c[2],\n                attributes: w && w[2],\n                select: s,\n                with: e\n              }\n            };\n          },\n      peg$c108 = function(t, e) {\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                keyword: 'table',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c109 = function(a, kc, cd) {\n            return {\n              action: a.toLowerCase(),\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c110 = function(kc, c) {\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c111 = function(id) {\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c112 = function(kw, tn) {\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c113 = \"algorithm\",\n      peg$c114 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c115 = \"instant\",\n      peg$c116 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c117 = \"inplace\",\n      peg$c118 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c119 = \"copy\",\n      peg$c120 = peg$literalExpectation(\"COPY\", true),\n      peg$c121 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c122 = \"lock\",\n      peg$c123 = peg$literalExpectation(\"LOCK\", true),\n      peg$c124 = \"none\",\n      peg$c125 = peg$literalExpectation(\"NONE\", true),\n      peg$c126 = \"shared\",\n      peg$c127 = peg$literalExpectation(\"SHARED\", true),\n      peg$c128 = \"exclusive\",\n      peg$c129 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c130 = function(s, val) {\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c131 = function(c) {\n            return {\n              action: 'add',\n              create_definitions: c,\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c132 = function(kc, c) {\n            return {\n              action: 'drop',\n              constraint: c,\n              keyword: kc.toLowerCase(),\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c133 = function(c) {\n            return {\n              action: 'with',\n              constraint: c,\n              keyword: 'check check constraint',\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c134 = \"nocheck\",\n      peg$c135 = peg$literalExpectation(\"NOCHECK\", true),\n      peg$c136 = function(c) {\n            return {\n              action: 'nocheck',\n              keyword: 'constraint',\n              constraint: c,\n              resource: 'constraint',\n              type: 'alter',\n            }\n          },\n      peg$c137 = function(kc, c, t, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c138 = function(p, kc, c, de, id) {\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c139 = function(kc, c) {\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c140 = function(l, o) {\n          return { with: l, on:o }\n        },\n      peg$c141 = function(l) {\n          return { index_options: l }\n        },\n      peg$c142 = \"primary key\",\n      peg$c143 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c144 = function(kc, p, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              ...id,\n            }\n        },\n      peg$c145 = function(kc, u, p, i, t, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c146 = \"not\",\n      peg$c147 = peg$literalExpectation(\"NOT\", true),\n      peg$c148 = \"for\",\n      peg$c149 = peg$literalExpectation(\"FOR\", true),\n      peg$c150 = \"replication\",\n      peg$c151 = peg$literalExpectation(\"REPLICATION\", true),\n      peg$c152 = function(kc, u, nfr, c) {\n          return {\n              constraint_type: u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              constraint: kc && kc.constraint,\n              index_type: nfr && { keyword: 'not for replication', type: '' },\n              definition: [c],\n              resource: 'constraint',\n            }\n        },\n      peg$c153 = \"foreign key\",\n      peg$c154 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c155 = function(kc, p, i, de, id) {\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c156 = \"match full\",\n      peg$c157 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c158 = \"match partial\",\n      peg$c159 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c160 = \"match simple\",\n      peg$c161 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c162 = function(kc, t, de, m, od, ou) {\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match: m && m.toLowerCase(),\n              on_action: [od, ou].filter(v => v)\n            }\n        },\n      peg$c163 = function(oa) {\n          return {\n            on_action: [oa]\n          }\n        },\n      peg$c164 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: `on ${kw[0].toLowerCase()}`,\n            value: ro\n          }\n        },\n      peg$c165 = function(kw, l) {\n          return {\n            type: 'function',\n            name: kw,\n            args: l\n          }\n        },\n      peg$c166 = \"restrict\",\n      peg$c167 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c168 = \"cascade\",\n      peg$c169 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c170 = \"set null\",\n      peg$c171 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c172 = \"no action\",\n      peg$c173 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c174 = \"set default\",\n      peg$c175 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c176 = function(kc) {\n          return {\n            type: 'origin',\n            value: kc.toLowerCase()\n          }\n        },\n      peg$c177 = \"character\",\n      peg$c178 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c179 = \"set\",\n      peg$c180 = peg$literalExpectation(\"SET\", true),\n      peg$c181 = function() {\n          return 'CHARACTER SET'\n        },\n      peg$c182 = \"charset\",\n      peg$c183 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c184 = \"collate\",\n      peg$c185 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c186 = function(kw, t, s, v) {\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c187 = \"auto_increment\",\n      peg$c188 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c189 = \"avg_row_length\",\n      peg$c190 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c191 = \"key_block_size\",\n      peg$c192 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c193 = \"max_rows\",\n      peg$c194 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c195 = \"min_rows\",\n      peg$c196 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c197 = \"stats_sample_pages\",\n      peg$c198 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c199 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c200 = \"connection\",\n      peg$c201 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c202 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c203 = \"compression\",\n      peg$c204 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c205 = \"'\",\n      peg$c206 = peg$literalExpectation(\"'\", false),\n      peg$c207 = \"zlib\",\n      peg$c208 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c209 = \"lz4\",\n      peg$c210 = peg$literalExpectation(\"LZ4\", true),\n      peg$c211 = function(kw, s, v) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c212 = \"engine\",\n      peg$c213 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c214 = function(kw, s, c) {\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c215 = function(o) {\n          return {\n            keyword: 'on',\n            value: `[${o}]`\n          }\n        },\n      peg$c216 = \"textimage_on\",\n      peg$c217 = peg$literalExpectation(\"TEXTIMAGE_ON\", true),\n      peg$c218 = function(to) {\n          return {\n            keyword:'textimage_on',\n            value: `[${to}]`\n          }\n        },\n      peg$c219 = function(fsid) {\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c220 = function(t) {\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c221 = function(kw, a) {\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c222 = function() {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'unlock',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c223 = \"read\",\n      peg$c224 = peg$literalExpectation(\"READ\", true),\n      peg$c225 = \"local\",\n      peg$c226 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c227 = function(s) {\n          return {\n            type: 'read',\n            suffix: s && 'local'\n          }\n        },\n      peg$c228 = \"low_priority\",\n      peg$c229 = peg$literalExpectation(\"LOW_PRIORITY\", true),\n      peg$c230 = \"write\",\n      peg$c231 = peg$literalExpectation(\"WRITE\", true),\n      peg$c232 = function(p) {\n          return {\n            type: 'write',\n            prefix: p && 'low_priority'\n          }\n        },\n      peg$c233 = function(t, lt) {\n          tableList.add(`lock::${t.db}::${t.table}`)\n          return {\n            table: t,\n            lock_type: lt\n          }\n        },\n      peg$c234 = function(head, tail) {\n          return createList(head, tail);\n        },\n      peg$c235 = function(ltl) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: 'tables',\n              tables: ltl\n            }\n          }\n        },\n      peg$c236 = function(e) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c237 = \"(\",\n      peg$c238 = peg$literalExpectation(\"(\", false),\n      peg$c239 = \")\",\n      peg$c240 = peg$literalExpectation(\")\", false),\n      peg$c241 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c242 = function(cte) {\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c243 = function(name, columns, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt, columns };\n        },\n      peg$c244 = function(l) {\n            return l\n          },\n      peg$c245 = function(cte, opts, top, d, c, f, w, g, h, o, l, fx) {\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                for: fx,\n                where: w,\n                groupby: g,\n                having: h,\n                top,\n                orderby: o,\n                limit: l\n            };\n        },\n      peg$c246 = \"percent\",\n      peg$c247 = peg$literalExpectation(\"PERCENT\", true),\n      peg$c248 = function(n, p) {\n          return {\n            value: n,\n            percent: p && p.toLowerCase(),\n            parentheses: true,\n          }\n        },\n      peg$c249 = function(n, p) {\n          return {\n            value: n,\n            percent: p && p.toLowerCase()\n          }\n        },\n      peg$c250 = function(head, tail) {\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c251 = function(option) { return option; },\n      peg$c252 = function(head, tail) {\n            columnList.add('select::null::(.*)')\n            const item = {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            }\n            if (tail && tail.length > 0) return createList(item, tail)\n            return [item]\n          },\n      peg$c253 = function(tbl) {\n            const table = tbl && tbl[0] || null\n            columnList.add(`select::${table}::(.*)`);\n            return {\n              expr: {\n                type: 'column_ref',\n                table: table,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c254 = function(e, alias) {\n            return { expr: e, as: alias };\n          },\n      peg$c255 = function(name, c) {\n            if (!c) return name;\n            return `${name}(${c[3].join(', ')})`\n          },\n      peg$c256 = function(i) { return i; },\n      peg$c257 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c258 = function(c, i) {\n          return {\n            column: c,\n            in_expr: i\n          }\n        },\n      peg$c259 = function(e, p, as) {\n          return {\n            'type': 'pivot',\n            'expr': e,\n            ...p,\n            as,\n          }\n        },\n      peg$c260 = function(e, p, as) {\n          return {\n            'type': 'unpivot',\n            'expr': e,\n            ...p,\n            as,\n          }\n        },\n      peg$c261 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c262 = \"btree\",\n      peg$c263 = peg$literalExpectation(\"BTREE\", true),\n      peg$c264 = \"hash\",\n      peg$c265 = peg$literalExpectation(\"HASH\", true),\n      peg$c266 = function(t) {\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c267 = function(k) {\n          return {\n            keyword: k.toLowerCase()\n          }\n        },\n      peg$c268 = function(head, tail) {\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c269 = function(s, t, e) {\n          return {\n            type: 'range',\n            symbol: t[0],\n            start: s,\n            end: s\n          }\n        },\n      peg$c270 = \"partitions\",\n      peg$c271 = peg$literalExpectation(\"PARTITIONS\", true),\n      peg$c272 = function(p) {\n          return {\n            type: 'on partitions',\n            partitions: p\n          }\n        },\n      peg$c273 = function(k, e, kbs) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          };\n        },\n      peg$c274 = \"fillfactor\",\n      peg$c275 = peg$literalExpectation(\"FILLFACTOR\", true),\n      peg$c276 = \"max_duration\",\n      peg$c277 = peg$literalExpectation(\"MAX_DURATION\", true),\n      peg$c278 = \"maxdop\",\n      peg$c279 = peg$literalExpectation(\"MAXDOP\", true),\n      peg$c280 = \"with\",\n      peg$c281 = peg$literalExpectation(\"WITH\", true),\n      peg$c282 = \"parser\",\n      peg$c283 = peg$literalExpectation(\"PARSER\", true),\n      peg$c284 = function(pn) {\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c285 = \"visible\",\n      peg$c286 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c287 = \"invisible\",\n      peg$c288 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c289 = function(k) {\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c290 = \"pad_index\",\n      peg$c291 = peg$literalExpectation(\"PAD_INDEX\", true),\n      peg$c292 = \"sort_in_tempdb\",\n      peg$c293 = peg$literalExpectation(\"SORT_IN_TEMPDB\", true),\n      peg$c294 = \"ignore_dup_key\",\n      peg$c295 = peg$literalExpectation(\"IGNORE_DUP_KEY\", true),\n      peg$c296 = \"statistics_norecompute\",\n      peg$c297 = peg$literalExpectation(\"STATISTICS_NORECOMPUTE\", true),\n      peg$c298 = \"statistics_incremental\",\n      peg$c299 = peg$literalExpectation(\"STATISTICS_INCREMENTAL\", true),\n      peg$c300 = \"drop_existing\",\n      peg$c301 = peg$literalExpectation(\"DROP_EXISTING\", true),\n      peg$c302 = \"online\",\n      peg$c303 = peg$literalExpectation(\"ONLINE\", true),\n      peg$c304 = \"resumable\",\n      peg$c305 = peg$literalExpectation(\"RESUMABLE\", true),\n      peg$c306 = \"allow_row_locks\",\n      peg$c307 = peg$literalExpectation(\"ALLOW_ROW_LOCKS\", true),\n      peg$c308 = \"allow_page_locks\",\n      peg$c309 = peg$literalExpectation(\"ALLOW_PAGE_LOCKS\", true),\n      peg$c310 = \"optimize_for_sequential_key\",\n      peg$c311 = peg$literalExpectation(\"OPTIMIZE_FOR_SEQUENTIAL_KEY\", true),\n      peg$c312 = function(k, e, r) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: {\n              type: 'origin',\n              value: r[0]\n            }\n          }\n        },\n      peg$c313 = \"data_compression\",\n      peg$c314 = peg$literalExpectation(\"DATA_COMPRESSION\", true),\n      peg$c315 = \"row\",\n      peg$c316 = peg$literalExpectation(\"ROW\", true),\n      peg$c317 = \"PAGE\",\n      peg$c318 = peg$literalExpectation(\"PAGE\", false),\n      peg$c319 = function(k, e, r, on) {\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: {\n              value: r,\n              on,\n            },\n          }\n        },\n      peg$c320 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c321 = function(t) { return t; },\n      peg$c322 = function(op, t, il) {\n            t.join = op;\n            t.using = il;\n            return t;\n          },\n      peg$c323 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c324 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c325 = \"forceseek\",\n      peg$c326 = peg$literalExpectation(\"FORCESEEK\", true),\n      peg$c327 = function(i, ic) {\n          return {\n            keyword: 'forceseek',\n            index: i,\n            index_columns: ic,\n            parentheses: true\n          }\n        },\n      peg$c328 = \"spatial_window_max_cells\",\n      peg$c329 = peg$literalExpectation(\"SPATIAL_WINDOW_MAX_CELLS\", true),\n      peg$c330 = function(n) {\n          return {\n            keyword: 'spatial_window_max_cells',\n            expr: n\n          }\n        },\n      peg$c331 = \"noexpand\",\n      peg$c332 = peg$literalExpectation(\"NOEXPAND\", true),\n      peg$c333 = function(p, il) {\n          return {\n            keyword: 'index',\n            expr: il,\n            parentheses: true,\n            prefix: p && p.toLowerCase()\n          }\n        },\n      peg$c334 = function(p, i) {\n          return {\n            keyword: 'index',\n            expr: i,\n            prefix: p && p.toLowerCase()\n          }\n        },\n      peg$c335 = \"forcescan\",\n      peg$c336 = peg$literalExpectation(\"FORCESCAN\", true),\n      peg$c337 = \"holdlock\",\n      peg$c338 = peg$literalExpectation(\"HOLDLOCK\", true),\n      peg$c339 = \"nolock\",\n      peg$c340 = peg$literalExpectation(\"NOLOCK\", true),\n      peg$c341 = \"nowait\",\n      peg$c342 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c343 = \"paglock\",\n      peg$c344 = peg$literalExpectation(\"PAGLOCK\", true),\n      peg$c345 = \"readcommitted\",\n      peg$c346 = peg$literalExpectation(\"READCOMMITTED\", true),\n      peg$c347 = \"readcommittedlock\",\n      peg$c348 = peg$literalExpectation(\"READCOMMITTEDLOCK\", true),\n      peg$c349 = \"readpast\",\n      peg$c350 = peg$literalExpectation(\"READPAST\", true),\n      peg$c351 = \"readuncommitted\",\n      peg$c352 = peg$literalExpectation(\"READUNCOMMITTED\", true),\n      peg$c353 = \"repeatableread \",\n      peg$c354 = peg$literalExpectation(\"REPEATABLEREAD \", true),\n      peg$c355 = \"rowlock\",\n      peg$c356 = peg$literalExpectation(\"ROWLOCK\", true),\n      peg$c357 = \"serializable\",\n      peg$c358 = peg$literalExpectation(\"SERIALIZABLE\", true),\n      peg$c359 = \"snapshot\",\n      peg$c360 = peg$literalExpectation(\"SNAPSHOT\", true),\n      peg$c361 = \"tablock\",\n      peg$c362 = peg$literalExpectation(\"TABLOCK\", true),\n      peg$c363 = \"tablockx\",\n      peg$c364 = peg$literalExpectation(\"TABLOCKX\", true),\n      peg$c365 = \"updlock\",\n      peg$c366 = peg$literalExpectation(\"UPDLOCK\", true),\n      peg$c367 = \"xlock\",\n      peg$c368 = peg$literalExpectation(\"XLOCK\", true),\n      peg$c369 = function(i) {\n          return {\n            keyword: 'literal_string',\n            expr: { type: 'origin', value: i }\n          }\n        },\n      peg$c370 = function(k, t) {\n          return {\n            keyword: k && k[0].toLowerCase(),\n            expr: t,\n            parentheses: true,\n          }\n        },\n      peg$c371 = function() {\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c372 = function(t, alias, th) {\n            t.as = alias\n            t.table_hint = th\n            return t\n          },\n      peg$c373 = function(stmt, alias) {\n          return {\n            expr: { type: 'values', values: stmt },\n            as: alias\n          };\n        },\n      peg$c374 = function(stmt, alias) {\n            if (Array.isArray(stmt)) stmt = { type: 'values', values: stmt }\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c375 = function(a, s) { return [a[0].toUpperCase(), s && s[0], 'JOIN'].filter(v => v).join(' '); },\n      peg$c376 = function() { return 'CROSS JOIN' },\n      peg$c377 = function(a) { return a ? 'INNER JOIN' : 'JOIN' },\n      peg$c378 = function(server, db, schema, table) {\n          return {\n              server,\n              db,\n              schema,\n              table\n            }\n        },\n      peg$c379 = function(db, schema, table) {\n            return {\n              db,\n              schema,\n              table\n            }\n          },\n      peg$c380 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c381 = function(v) {\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c382 = function(head, tail) {\n          const len = tail.length\n          let result = head\n          for (let i = 0; i < len; ++i) {\n            result = createBinaryExpr(tail[i][1], result, tail[i][3])\n          }\n          return result\n        },\n      peg$c383 = function(e) { return e; },\n      peg$c384 = function(e) { return e.value; },\n      peg$c385 = function(bc) { return bc; },\n      peg$c386 = function(l) { return l; },\n      peg$c387 = function(e, d) {\n          const obj = { expr: e, type: d };\n          return obj;\n        },\n      peg$c388 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c389 = \"raw\",\n      peg$c390 = peg$literalExpectation(\"RAW\", true),\n      peg$c391 = \"auto\",\n      peg$c392 = peg$literalExpectation(\"AUTO\", true),\n      peg$c393 = \"explicit\",\n      peg$c394 = peg$literalExpectation(\"EXPLICIT\", true),\n      peg$c395 = function(i) {\n          return {\n            keyword: i,\n          }\n        },\n      peg$c396 = \"path\",\n      peg$c397 = peg$literalExpectation(\"PATH\", true),\n      peg$c398 = function(i, v) {\n          return {\n            keyword: i,\n            expr: v && v[2]\n          }\n        },\n      peg$c399 = \"xml\",\n      peg$c400 = peg$literalExpectation(\"XML\", true),\n      peg$c401 = function(v) {\n          return {\n            type: 'for xml',\n            ...v,\n          }\n        },\n      peg$c402 = function(cte, t, l, w) {\n            const dbObj = {}\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'update'\n              if (db) dbObj[table] = db\n              if (table) tableList.add(`${action}::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => {\n                if (col.table) {\n                  const table = queryTableAlias(col.table)\n                  tableList.add(`update::${dbObj[table] || null}::${table}`)\n                }\n                columnList.add(`update::${col.table}::${col.column}`)\n              });\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                with: cte,\n                type: 'update',\n                table: t,\n                set: l,\n                where: w\n              }\n            };\n          },\n      peg$c403 = function(t, f, w) {\n           if(f) f.forEach(tableInfo => {\n              const { db, as, table, join } = tableInfo\n              const action = join ? 'select' : 'delete'\n              if (table) tableList.add(`${action}::${db}::${table}`)\n              if (!join) columnList.add(`delete::${table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c404 = \"=\",\n      peg$c405 = peg$literalExpectation(\"=\", false),\n      peg$c406 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c407 = function(tbl, c, v) {\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c408 = function(il) {\n            return il\n          },\n      peg$c409 = function(v) {\n          return v\n        },\n      peg$c410 = function(ri, t, p, c, v) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n              }\n            };\n          },\n      peg$c411 = function(ri, ig, it, t, p, v) {\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            const prefix = [ig, it].filter(v => v).map(v => v[0] && v[0].toLowerCase()).join(' ')\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                prefix,\n              }\n            };\n          },\n      peg$c412 = function() { return 'insert'; },\n      peg$c413 = function() { return 'replace'; },\n      peg$c414 = function(l) {\n            return l;\n          },\n      peg$c415 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c416 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c417 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c418 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c419 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c420 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c421 = function(head, tail, rh) {\n          const logicExpr = createBinaryExprChain(head, tail)\n          if (rh === null) return logicExpr\n          else if (rh.type === 'arithmetic') return createBinaryExprChain(logicExpr, rh.tail)\n          else return createBinaryExpr(rh.op, logicExpr, rh.right)\n        },\n      peg$c422 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c423 = function(head, tail) {\n          const ast = head.ast\n          if (ast && ast.type === 'select') {\n            if (!(head.parentheses_symbol || head.parentheses || head.ast.parentheses || head.ast.parentheses_symbol) || ast.columns.length !== 1 || ast.columns[0].expr.column === '*') throw new Error('invalid column clause with select statement')\n          }\n          if (!tail || tail.length === 0) return head\n          const len = tail.length\n          let result = tail[len - 1][3]\n          for (let i = len - 1; i >= 0; i--) {\n            const left = i === 0 ? head : tail[i - 1][3]\n            result = createBinaryExpr(tail[i][1], left, result)\n          }\n          return result\n        },\n      peg$c424 = function(head, tail) {\n          const len = tail.length\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < len; ++i) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' }\n            el.value = result\n            return el\n          }\n          return result\n        },\n      peg$c425 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c426 = \"!\",\n      peg$c427 = peg$literalExpectation(\"!\", false),\n      peg$c428 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c429 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c430 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c431 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c432 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c433 = \">=\",\n      peg$c434 = peg$literalExpectation(\">=\", false),\n      peg$c435 = \">\",\n      peg$c436 = peg$literalExpectation(\">\", false),\n      peg$c437 = \"<=\",\n      peg$c438 = peg$literalExpectation(\"<=\", false),\n      peg$c439 = \"<>\",\n      peg$c440 = peg$literalExpectation(\"<>\", false),\n      peg$c441 = \"<\",\n      peg$c442 = peg$literalExpectation(\"<\", false),\n      peg$c443 = \"!=\",\n      peg$c444 = peg$literalExpectation(\"!=\", false),\n      peg$c445 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c446 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c447 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c448 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c449 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c450 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c451 = \"+\",\n      peg$c452 = peg$literalExpectation(\"+\", false),\n      peg$c453 = \"-\",\n      peg$c454 = peg$literalExpectation(\"-\", false),\n      peg$c455 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c456 = \"*\",\n      peg$c457 = peg$literalExpectation(\"*\", false),\n      peg$c458 = \"/\",\n      peg$c459 = peg$literalExpectation(\"/\", false),\n      peg$c460 = \"%\",\n      peg$c461 = peg$literalExpectation(\"%\", false),\n      peg$c462 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c463 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c464 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c465 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c466 = function(name) {\n            return name;\n          },\n      peg$c467 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c468 = \"\\\"\",\n      peg$c469 = peg$literalExpectation(\"\\\"\", false),\n      peg$c470 = /^[^\"]/,\n      peg$c471 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c472 = function(chars) { return chars.join(''); },\n      peg$c473 = /^[^']/,\n      peg$c474 = peg$classExpectation([\"'\"], true, false),\n      peg$c475 = \"`\",\n      peg$c476 = peg$literalExpectation(\"`\", false),\n      peg$c477 = /^[^`]/,\n      peg$c478 = peg$classExpectation([\"`\"], true, false),\n      peg$c479 = \"[\",\n      peg$c480 = peg$literalExpectation(\"[\", false),\n      peg$c481 = /^[^\\]]/,\n      peg$c482 = peg$classExpectation([\"]\"], true, false),\n      peg$c483 = \"]\",\n      peg$c484 = peg$literalExpectation(\"]\", false),\n      peg$c485 = function(name) {\n          return name;\n        },\n      peg$c486 = function(name) { return name; },\n      peg$c487 = function(start, parts) { return start + parts.join(''); },\n      peg$c488 = /^[A-Za-z_@#]/,\n      peg$c489 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\", \"@\", \"#\"], false, false),\n      peg$c490 = /^[A-Za-z0-9_\\-@$]/,\n      peg$c491 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\", \"@\", \"$\"], false, false),\n      peg$c492 = /^[A-Za-z0-9_:]/,\n      peg$c493 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c494 = \":\",\n      peg$c495 = peg$literalExpectation(\":\", false),\n      peg$c496 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c497 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc\n            };\n          },\n      peg$c498 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c499 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c500 = \"over\",\n      peg$c501 = peg$literalExpectation(\"OVER\", true),\n      peg$c502 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c503 = \"window\",\n      peg$c504 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c505 = function(l) {\n          // => { keyword: 'window'; type: 'window', expr: named_window_expr_list; }\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c506 = function(head, tail) {\n          // => named_window_expr[]\n            return createList(head, tail);\n          },\n      peg$c507 = function(nw, anw) {\n          // => { name: ident_name;  as_window_specification: as_window_specification; }\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c508 = function(ws) {\n          return {\n            window_specification: ws || {},\n            parentheses: true\n          }\n        },\n      peg$c509 = function(bc, l, w) {\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w,\n          }\n        },\n      peg$c510 = function(bc, l) {\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: null\n          }\n        },\n      peg$c511 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c512 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c513 = \"following\",\n      peg$c514 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c515 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c516 = \"preceding\",\n      peg$c517 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c518 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c519 = \"current\",\n      peg$c520 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c521 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c522 = \"unbounded\",\n      peg$c523 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c524 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c525 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c526 = function(e) { return { expr: e }; },\n      peg$c527 = function(d, c, tail, or) {\n          const len = tail.length\n          let result = c\n          result.parentheses = true\n          for (let i = 0; i < len; ++i) {\n            result = createBinaryExpr(tail[i][1], result, tail[i][3])\n          }\n          return {\n            distinct: d,\n            expr: result,\n            orderby: or,\n          };\n        },\n      peg$c528 = function(d, c, or) { return { distinct: d, expr: c, orderby: or }; },\n      peg$c529 = function() { return { type: 'star', value: '*' }; },\n      peg$c530 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c531 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c532 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c533 = function(c, e, t) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c534 = function(c, e, precision) {\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c535 = function(c, e, precision, scale) {\n            return {\n              type: 'cast',\n              keyword: c.toLowerCase(),\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c536 = function(c, e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            keyword: c.toLowerCase(),\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c537 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c538 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c539 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c540 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c541 = \"n\",\n      peg$c542 = peg$literalExpectation(\"N\", true),\n      peg$c543 = function(r, ca) {\n            return {\n              type: r ? 'var_string' : 'single_quote_string',\n              value: ca[1].join(''),\n            };\n          },\n      peg$c544 = function(ca) {\n            return {\n              type: 'double_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c545 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c546 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c547 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c548 = /^[^'\\\\]/,\n      peg$c549 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c550 = \"\\\\'\",\n      peg$c551 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c552 = function() { return \"\\\\'\";  },\n      peg$c553 = \"\\\\\\\"\",\n      peg$c554 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c555 = function() { return '\\\\\"';  },\n      peg$c556 = \"\\\\\\\\\",\n      peg$c557 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c558 = function() { return \"\\\\\\\\\"; },\n      peg$c559 = \"\\\\/\",\n      peg$c560 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c561 = function() { return \"\\\\/\";  },\n      peg$c562 = \"\\\\b\",\n      peg$c563 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c564 = function() { return \"\\b\"; },\n      peg$c565 = \"\\\\f\",\n      peg$c566 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c567 = function() { return \"\\f\"; },\n      peg$c568 = \"\\\\n\",\n      peg$c569 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c570 = function() { return \"\\n\"; },\n      peg$c571 = \"\\\\r\",\n      peg$c572 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c573 = function() { return \"\\r\"; },\n      peg$c574 = \"\\\\t\",\n      peg$c575 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c576 = function() { return \"\\t\"; },\n      peg$c577 = \"\\\\u\",\n      peg$c578 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c579 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c580 = \"\\\\\",\n      peg$c581 = peg$literalExpectation(\"\\\\\", false),\n      peg$c582 = function() { return \"\\\\\"; },\n      peg$c583 = \"''\",\n      peg$c584 = peg$literalExpectation(\"''\", false),\n      peg$c585 = function() { return \"''\" },\n      peg$c586 = \"\\\"\\\"\",\n      peg$c587 = peg$literalExpectation(\"\\\"\\\"\", false),\n      peg$c588 = function() { return '\"\"' },\n      peg$c589 = \"``\",\n      peg$c590 = peg$literalExpectation(\"``\", false),\n      peg$c591 = function() { return '``' },\n      peg$c592 = /^[\\n\\r]/,\n      peg$c593 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c594 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c595 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c596 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c597 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c598 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c599 = function(op, digits) { return op + digits; },\n      peg$c600 = function(op, digit) { return op + digit; },\n      peg$c601 = \".\",\n      peg$c602 = peg$literalExpectation(\".\", false),\n      peg$c603 = function(digits) { return \".\" + digits; },\n      peg$c604 = function(e, digits) { return e + digits; },\n      peg$c605 = function(digits) { return digits.join(\"\"); },\n      peg$c606 = /^[0-9]/,\n      peg$c607 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c608 = /^[0-9a-fA-F]/,\n      peg$c609 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c610 = /^[eE]/,\n      peg$c611 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c612 = /^[+\\-]/,\n      peg$c613 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c614 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c615 = \"null\",\n      peg$c616 = peg$literalExpectation(\"NULL\", true),\n      peg$c617 = \"not null\",\n      peg$c618 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c619 = \"true\",\n      peg$c620 = peg$literalExpectation(\"TRUE\", true),\n      peg$c621 = \"to\",\n      peg$c622 = peg$literalExpectation(\"TO\", true),\n      peg$c623 = \"top\",\n      peg$c624 = peg$literalExpectation(\"TOP\", true),\n      peg$c625 = \"false\",\n      peg$c626 = peg$literalExpectation(\"FALSE\", true),\n      peg$c627 = \"show\",\n      peg$c628 = peg$literalExpectation(\"SHOW\", true),\n      peg$c629 = \"drop\",\n      peg$c630 = peg$literalExpectation(\"DROP\", true),\n      peg$c631 = function() { return 'DROP'; },\n      peg$c632 = \"declare\",\n      peg$c633 = peg$literalExpectation(\"DECLARE\", true),\n      peg$c634 = function() { return 'DECLARE'; },\n      peg$c635 = \"use\",\n      peg$c636 = peg$literalExpectation(\"USE\", true),\n      peg$c637 = \"alter\",\n      peg$c638 = peg$literalExpectation(\"ALTER\", true),\n      peg$c639 = function() { return 'ALTER' },\n      peg$c640 = \"select\",\n      peg$c641 = peg$literalExpectation(\"SELECT\", true),\n      peg$c642 = \"update\",\n      peg$c643 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c644 = \"create\",\n      peg$c645 = peg$literalExpectation(\"CREATE\", true),\n      peg$c646 = \"temporary\",\n      peg$c647 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c648 = \"delete\",\n      peg$c649 = peg$literalExpectation(\"DELETE\", true),\n      peg$c650 = \"insert\",\n      peg$c651 = peg$literalExpectation(\"INSERT\", true),\n      peg$c652 = \"RECURSIVE\",\n      peg$c653 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c654 = \"replace\",\n      peg$c655 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c656 = \"rename\",\n      peg$c657 = peg$literalExpectation(\"RENAME\", true),\n      peg$c658 = \"ignore\",\n      peg$c659 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c660 = \"explain\",\n      peg$c661 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c662 = \"partition\",\n      peg$c663 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c664 = function() { return 'PARTITION' },\n      peg$c665 = \"into\",\n      peg$c666 = peg$literalExpectation(\"INTO\", true),\n      peg$c667 = \"from\",\n      peg$c668 = peg$literalExpectation(\"FROM\", true),\n      peg$c669 = function() { return 'SET' },\n      peg$c670 = \"unlock\",\n      peg$c671 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c672 = \"as\",\n      peg$c673 = peg$literalExpectation(\"AS\", true),\n      peg$c674 = \"table\",\n      peg$c675 = peg$literalExpectation(\"TABLE\", true),\n      peg$c676 = function() { return 'TABLE'; },\n      peg$c677 = \"view\",\n      peg$c678 = peg$literalExpectation(\"VIEW\", true),\n      peg$c679 = function() { return 'VIEW'; },\n      peg$c680 = \"database\",\n      peg$c681 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c682 = function() { return 'DATABASE'; },\n      peg$c683 = \"scheme\",\n      peg$c684 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c685 = function() { return 'SCHEME'; },\n      peg$c686 = \"tables\",\n      peg$c687 = peg$literalExpectation(\"TABLES\", true),\n      peg$c688 = function() { return 'TABLES'; },\n      peg$c689 = function() { return 'COLLATE'; },\n      peg$c690 = \"on\",\n      peg$c691 = peg$literalExpectation(\"ON\", true),\n      peg$c692 = \"off\",\n      peg$c693 = peg$literalExpectation(\"OFF\", true),\n      peg$c694 = \"left\",\n      peg$c695 = peg$literalExpectation(\"LEFT\", true),\n      peg$c696 = \"right\",\n      peg$c697 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c698 = \"full\",\n      peg$c699 = peg$literalExpectation(\"FULL\", true),\n      peg$c700 = \"inner\",\n      peg$c701 = peg$literalExpectation(\"INNER\", true),\n      peg$c702 = \"cross\",\n      peg$c703 = peg$literalExpectation(\"CROSS\", true),\n      peg$c704 = \"join\",\n      peg$c705 = peg$literalExpectation(\"JOIN\", true),\n      peg$c706 = \"outer\",\n      peg$c707 = peg$literalExpectation(\"OUTER\", true),\n      peg$c708 = \"union\",\n      peg$c709 = peg$literalExpectation(\"UNION\", true),\n      peg$c710 = \"values\",\n      peg$c711 = peg$literalExpectation(\"VALUES\", true),\n      peg$c712 = \"using\",\n      peg$c713 = peg$literalExpectation(\"USING\", true),\n      peg$c714 = \"where\",\n      peg$c715 = peg$literalExpectation(\"WHERE\", true),\n      peg$c716 = \"go\",\n      peg$c717 = peg$literalExpectation(\"GO\", true),\n      peg$c718 = function() { return 'GO'; },\n      peg$c719 = \"group\",\n      peg$c720 = peg$literalExpectation(\"GROUP\", true),\n      peg$c721 = \"by\",\n      peg$c722 = peg$literalExpectation(\"BY\", true),\n      peg$c723 = \"order\",\n      peg$c724 = peg$literalExpectation(\"ORDER\", true),\n      peg$c725 = \"having\",\n      peg$c726 = peg$literalExpectation(\"HAVING\", true),\n      peg$c727 = \"limit\",\n      peg$c728 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c729 = \"offset\",\n      peg$c730 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c731 = function() { return 'OFFSET'; },\n      peg$c732 = \"asc\",\n      peg$c733 = peg$literalExpectation(\"ASC\", true),\n      peg$c734 = function() { return 'ASC'; },\n      peg$c735 = \"desc\",\n      peg$c736 = peg$literalExpectation(\"DESC\", true),\n      peg$c737 = function() { return 'DESC'; },\n      peg$c738 = \"all\",\n      peg$c739 = peg$literalExpectation(\"ALL\", true),\n      peg$c740 = function() { return 'ALL'; },\n      peg$c741 = \"distinct\",\n      peg$c742 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c743 = function() { return 'DISTINCT';},\n      peg$c744 = \"between\",\n      peg$c745 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c746 = function() { return 'BETWEEN'; },\n      peg$c747 = \"in\",\n      peg$c748 = peg$literalExpectation(\"IN\", true),\n      peg$c749 = function() { return 'IN'; },\n      peg$c750 = \"is\",\n      peg$c751 = peg$literalExpectation(\"IS\", true),\n      peg$c752 = function() { return 'IS'; },\n      peg$c753 = \"like\",\n      peg$c754 = peg$literalExpectation(\"LIKE\", true),\n      peg$c755 = function() { return 'LIKE'; },\n      peg$c756 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c757 = function() { return 'EXISTS'; },\n      peg$c758 = function() { return 'NOT'; },\n      peg$c759 = \"and\",\n      peg$c760 = peg$literalExpectation(\"AND\", true),\n      peg$c761 = function() { return 'AND'; },\n      peg$c762 = \"or\",\n      peg$c763 = peg$literalExpectation(\"OR\", true),\n      peg$c764 = function() { return 'OR'; },\n      peg$c765 = \"count\",\n      peg$c766 = peg$literalExpectation(\"COUNT\", true),\n      peg$c767 = function() { return 'COUNT'; },\n      peg$c768 = \"max\",\n      peg$c769 = peg$literalExpectation(\"MAX\", true),\n      peg$c770 = function() { return 'MAX'; },\n      peg$c771 = \"min\",\n      peg$c772 = peg$literalExpectation(\"MIN\", true),\n      peg$c773 = function() { return 'MIN'; },\n      peg$c774 = \"sum\",\n      peg$c775 = peg$literalExpectation(\"SUM\", true),\n      peg$c776 = function() { return 'SUM'; },\n      peg$c777 = \"avg\",\n      peg$c778 = peg$literalExpectation(\"AVG\", true),\n      peg$c779 = function() { return 'AVG'; },\n      peg$c780 = \"call\",\n      peg$c781 = peg$literalExpectation(\"CALL\", true),\n      peg$c782 = function() { return 'CALL'; },\n      peg$c783 = \"case\",\n      peg$c784 = peg$literalExpectation(\"CASE\", true),\n      peg$c785 = \"when\",\n      peg$c786 = peg$literalExpectation(\"WHEN\", true),\n      peg$c787 = \"then\",\n      peg$c788 = peg$literalExpectation(\"THEN\", true),\n      peg$c789 = \"else\",\n      peg$c790 = peg$literalExpectation(\"ELSE\", true),\n      peg$c791 = \"end\",\n      peg$c792 = peg$literalExpectation(\"END\", true),\n      peg$c793 = \"cast\",\n      peg$c794 = peg$literalExpectation(\"CAST\", true),\n      peg$c795 = function() { return 'CAST' },\n      peg$c796 = \"bit\",\n      peg$c797 = peg$literalExpectation(\"BIT\", true),\n      peg$c798 = function() { return 'BIT'; },\n      peg$c799 = \"money\",\n      peg$c800 = peg$literalExpectation(\"MONEY\", true),\n      peg$c801 = function() { return 'MONEY'; },\n      peg$c802 = \"smallmoney\",\n      peg$c803 = peg$literalExpectation(\"SMALLMONEY\", true),\n      peg$c804 = function() { return 'SMALLMONEY'; },\n      peg$c805 = \"char\",\n      peg$c806 = peg$literalExpectation(\"CHAR\", true),\n      peg$c807 = function() { return 'CHAR'; },\n      peg$c808 = \"varchar\",\n      peg$c809 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c810 = function() { return 'VARCHAR';},\n      peg$c811 = \"nchar\",\n      peg$c812 = peg$literalExpectation(\"NCHAR\", true),\n      peg$c813 = function() { return 'NCHAR';},\n      peg$c814 = \"nvarchar\",\n      peg$c815 = peg$literalExpectation(\"NVARCHAR\", true),\n      peg$c816 = function() { return 'NVARCHAR';},\n      peg$c817 = \"numeric\",\n      peg$c818 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c819 = function() { return 'NUMERIC'; },\n      peg$c820 = \"decimal\",\n      peg$c821 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c822 = function() { return 'DECIMAL'; },\n      peg$c823 = \"signed\",\n      peg$c824 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c825 = function() { return 'SIGNED'; },\n      peg$c826 = \"unsigned\",\n      peg$c827 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c828 = function() { return 'UNSIGNED'; },\n      peg$c829 = \"int\",\n      peg$c830 = peg$literalExpectation(\"INT\", true),\n      peg$c831 = function() { return 'INT'; },\n      peg$c832 = \"zerofill\",\n      peg$c833 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c834 = function() { return 'ZEROFILL'; },\n      peg$c835 = \"integer\",\n      peg$c836 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c837 = function() { return 'INTEGER'; },\n      peg$c838 = \"json\",\n      peg$c839 = peg$literalExpectation(\"JSON\", true),\n      peg$c840 = function() { return 'JSON'; },\n      peg$c841 = \"smallint\",\n      peg$c842 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c843 = function() { return 'SMALLINT'; },\n      peg$c844 = \"tinyint\",\n      peg$c845 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c846 = function() { return 'TINYINT'; },\n      peg$c847 = \"tinytext\",\n      peg$c848 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c849 = function() { return 'TINYTEXT'; },\n      peg$c850 = \"text\",\n      peg$c851 = peg$literalExpectation(\"TEXT\", true),\n      peg$c852 = function() { return 'TEXT'; },\n      peg$c853 = \"mediumtext\",\n      peg$c854 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c855 = function() { return 'MEDIUMTEXT'; },\n      peg$c856 = \"longtext\",\n      peg$c857 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c858 = function() { return 'LONGTEXT'; },\n      peg$c859 = \"bigint\",\n      peg$c860 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c861 = function() { return 'BIGINT'; },\n      peg$c862 = \"float\",\n      peg$c863 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c864 = function() { return 'FLOAT'; },\n      peg$c865 = \"real\",\n      peg$c866 = peg$literalExpectation(\"REAL\", true),\n      peg$c867 = function() { return 'REAL'; },\n      peg$c868 = \"double\",\n      peg$c869 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c870 = function() { return 'DOUBLE'; },\n      peg$c871 = \"date\",\n      peg$c872 = peg$literalExpectation(\"DATE\", true),\n      peg$c873 = function() { return 'DATE'; },\n      peg$c874 = \"smalldatetime\",\n      peg$c875 = peg$literalExpectation(\"SMALLDATETIME\", true),\n      peg$c876 = function() { return 'SMALLDATETIME'; },\n      peg$c877 = \"datetime\",\n      peg$c878 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c879 = function() { return 'DATETIME'; },\n      peg$c880 = \"datetime2\",\n      peg$c881 = peg$literalExpectation(\"DATETIME2\", true),\n      peg$c882 = function() { return 'DATETIME2'; },\n      peg$c883 = \"datetimeoffset\",\n      peg$c884 = peg$literalExpectation(\"DATETIMEOFFSET\", true),\n      peg$c885 = function() { return 'DATETIMEOFFSET'; },\n      peg$c886 = \"rows\",\n      peg$c887 = peg$literalExpectation(\"ROWS\", true),\n      peg$c888 = function() { return 'ROWS'; },\n      peg$c889 = \"time\",\n      peg$c890 = peg$literalExpectation(\"TIME\", true),\n      peg$c891 = function() { return 'TIME'; },\n      peg$c892 = \"timestamp\",\n      peg$c893 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c894 = function() { return 'TIMESTAMP'; },\n      peg$c895 = \"truncate\",\n      peg$c896 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c897 = function() { return 'TRUNCATE'; },\n      peg$c898 = \"uniqueidentifier\",\n      peg$c899 = peg$literalExpectation(\"UNIQUEIDENTIFIER\", true),\n      peg$c900 = function() { return 'UNIQUEIDENTIFIER'; },\n      peg$c901 = \"user\",\n      peg$c902 = peg$literalExpectation(\"USER\", true),\n      peg$c903 = function() { return 'USER'; },\n      peg$c904 = \"current_date\",\n      peg$c905 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c906 = function() { return 'CURRENT_DATE'; },\n      peg$c907 = \"adddate\",\n      peg$c908 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c909 = function() { return 'ADDDATE'; },\n      peg$c910 = \"interval\",\n      peg$c911 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c912 = function() { return 'INTERVAL'; },\n      peg$c913 = \"year\",\n      peg$c914 = peg$literalExpectation(\"YEAR\", true),\n      peg$c915 = function() { return 'YEAR'; },\n      peg$c916 = \"month\",\n      peg$c917 = peg$literalExpectation(\"MONTH\", true),\n      peg$c918 = function() { return 'MONTH'; },\n      peg$c919 = \"day\",\n      peg$c920 = peg$literalExpectation(\"DAY\", true),\n      peg$c921 = function() { return 'DAY'; },\n      peg$c922 = \"hour\",\n      peg$c923 = peg$literalExpectation(\"HOUR\", true),\n      peg$c924 = function() { return 'HOUR'; },\n      peg$c925 = \"minute\",\n      peg$c926 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c927 = function() { return 'MINUTE'; },\n      peg$c928 = \"second\",\n      peg$c929 = peg$literalExpectation(\"SECOND\", true),\n      peg$c930 = function() { return 'SECOND'; },\n      peg$c931 = \"current_time\",\n      peg$c932 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c933 = function() { return 'CURRENT_TIME'; },\n      peg$c934 = \"current_timestamp\",\n      peg$c935 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c936 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c937 = \"current_user\",\n      peg$c938 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c939 = function() { return 'CURRENT_USER'; },\n      peg$c940 = \"session_user\",\n      peg$c941 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c942 = function() { return 'SESSION_USER'; },\n      peg$c943 = \"system_user\",\n      peg$c944 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c945 = function() { return 'SYSTEM_USER'; },\n      peg$c946 = \"global\",\n      peg$c947 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c948 = function() { return 'GLOBAL'; },\n      peg$c949 = \"session\",\n      peg$c950 = peg$literalExpectation(\"SESSION\", true),\n      peg$c951 = function() { return 'SESSION'; },\n      peg$c952 = function() { return 'LOCAL'; },\n      peg$c953 = \"pivot\",\n      peg$c954 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c955 = function() { return 'PIVOT'; },\n      peg$c956 = \"unpivot\",\n      peg$c957 = peg$literalExpectation(\"UNPIVOT\", true),\n      peg$c958 = function() { return 'UNPIVOT'; },\n      peg$c959 = \"persist\",\n      peg$c960 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c961 = function() { return 'PERSIST'; },\n      peg$c962 = \"persist_only\",\n      peg$c963 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c964 = function() { return 'PERSIST_ONLY'; },\n      peg$c965 = \"@@\",\n      peg$c966 = peg$literalExpectation(\"@@\", false),\n      peg$c967 = \"$\",\n      peg$c968 = peg$literalExpectation(\"$\", false),\n      peg$c969 = \"return\",\n      peg$c970 = peg$literalExpectation(\"return\", true),\n      peg$c971 = \":=\",\n      peg$c972 = peg$literalExpectation(\":=\", false),\n      peg$c973 = \"dual\",\n      peg$c974 = peg$literalExpectation(\"DUAL\", true),\n      peg$c975 = \"add\",\n      peg$c976 = peg$literalExpectation(\"ADD\", true),\n      peg$c977 = function() { return 'ADD'; },\n      peg$c978 = \"column\",\n      peg$c979 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c980 = function() { return 'COLUMN'; },\n      peg$c981 = \"index\",\n      peg$c982 = peg$literalExpectation(\"INDEX\", true),\n      peg$c983 = function() { return 'INDEX'; },\n      peg$c984 = function() { return 'KEY'; },\n      peg$c985 = \"fulltext\",\n      peg$c986 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c987 = function() { return 'FULLTEXT'; },\n      peg$c988 = \"spatial\",\n      peg$c989 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c990 = function() { return 'SPATIAL'; },\n      peg$c991 = function() { return 'UNIQUE'; },\n      peg$c992 = \"clustered\",\n      peg$c993 = peg$literalExpectation(\"CLUSTERED\", true),\n      peg$c994 = function() { return 'CLUSTERED'; },\n      peg$c995 = \"nonclustered\",\n      peg$c996 = peg$literalExpectation(\"NONCLUSTERED\", true),\n      peg$c997 = function() { return 'NONCLUSTERED'; },\n      peg$c998 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c999 = \"comment\",\n      peg$c1000 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c1001 = function() { return 'COMMENT'; },\n      peg$c1002 = \"constraint\",\n      peg$c1003 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c1004 = function() { return 'CONSTRAINT'; },\n      peg$c1005 = \"references\",\n      peg$c1006 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c1007 = function() { return 'REFERENCES'; },\n      peg$c1008 = \"sql_calc_found_rows\",\n      peg$c1009 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c1010 = \"sql_cache\",\n      peg$c1011 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c1012 = \"sql_no_cache\",\n      peg$c1013 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c1014 = \"sql_small_result\",\n      peg$c1015 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c1016 = \"sql_big_result\",\n      peg$c1017 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c1018 = \"sql_buffer_result\",\n      peg$c1019 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c1020 = \",\",\n      peg$c1021 = peg$literalExpectation(\",\", false),\n      peg$c1022 = \";\",\n      peg$c1023 = peg$literalExpectation(\";\", false),\n      peg$c1024 = \"||\",\n      peg$c1025 = peg$literalExpectation(\"||\", false),\n      peg$c1026 = \"&&\",\n      peg$c1027 = peg$literalExpectation(\"&&\", false),\n      peg$c1028 = \"/*\",\n      peg$c1029 = peg$literalExpectation(\"/*\", false),\n      peg$c1030 = \"*/\",\n      peg$c1031 = peg$literalExpectation(\"*/\", false),\n      peg$c1032 = \"--\",\n      peg$c1033 = peg$literalExpectation(\"--\", false),\n      peg$c1034 = \"#\",\n      peg$c1035 = peg$literalExpectation(\"#\", false),\n      peg$c1036 = function(k, s, c) {\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1037 = peg$anyExpectation(),\n      peg$c1038 = /^[ \\t\\n\\r]/,\n      peg$c1039 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1040 = function() { varList = []; return true; },\n      peg$c1041 = function(s) {\n            return { stmt: s, vars: varList };\n          },\n      peg$c1042 = function(va, s, e) {\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1043 = function(e) {\n            return { type: 'return', expr: e };\n          },\n      peg$c1044 = function(lt, op, rt, expr) {\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1045 = function(e) {\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1046 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1047 = function(name, l) {\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1048 = function(name) {\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1049 = function(l) {\n          return { type: 'array', value: l };\n        },\n      peg$c1050 = function(p, d) {\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1051 = function(name, m) {\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1052 = function(n) {\n          return {\n            type: 'var',\n            name: n.value,\n            members: [],\n            quoted: null,\n            prefix: null,\n          }\n        },\n      peg$c1053 = function(l) {\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1054 = function(lb, t, rb) { return (lb && !rb) || (!lb && rb) },\n      peg$c1055 = function(lb, t, rb, l) {\n          return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true };\n        },\n      peg$c1056 = function(lb, t, rb) {\n          return { dataType: t };\n        },\n      peg$c1057 = function(lb, t, rb, m) {\n          return {\n            dataType: t,\n            length: 'max'\n          }\n        },\n      peg$c1058 = function(un, ze) {\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1059 = function(lb, t, rb, l, r, s) {\n          return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s };\n        },\n      peg$c1060 = function(lb, t, rb, l, s) {\n          return { dataType: t, length: parseInt(l.join(''), 10), suffix: s };\n        },\n      peg$c1061 = function(lb, t, rb, s) {\n          return { dataType: t, suffix: s };\n        },\n      peg$c1062 = function(lb, t, rb, l, r) {\n          return  {dataType: t, length: parseInt(l.join(''), 10), parentheses: true }\n        },\n      peg$c1063 = function(lb, t, rb) {\n          return { dataType: t }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestart_item();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseKW_GO();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parse__();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parsestart_item();\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s5 = [s5, s6, s7, s8];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseKW_GO();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsestart_item();\n                if (s8 === peg$FAILED) {\n                  s8 = null;\n                }\n                if (s8 !== peg$FAILED) {\n                  s5 = [s5, s6, s7, s8];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestart_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseSEMICOLON();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseunlock_stmt();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsedeclare_stmt();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseexec_stmt();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseif_else_stmt();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_db_stmt();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_stmt() {\n    var s0;\n\n    s0 = peg$parsealter_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsealter_view_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseSEMICOLON();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecrud_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UNION();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c4();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c5(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c7(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c8(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_order();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DESC();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c9(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecolumn_ref();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinclude_column() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c10) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c11); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_CLUSTERED();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_NONCLUSTERED();\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_ON();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetable_name();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseLPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecolumn_order_list();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseRPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseinclude_column();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsewhere_clause();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parseon_clause();\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$currPos;\n                                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c13) {\n                                                          s28 = input.substr(peg$currPos, 13);\n                                                          peg$currPos += 13;\n                                                        } else {\n                                                          s28 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                                                        }\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseident();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s28 = [s28, s29, s30];\n                                                              s27 = s28;\n                                                            } else {\n                                                              peg$currPos = s27;\n                                                              s27 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s27;\n                                                            s27 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s27;\n                                                          s27 = peg$FAILED;\n                                                        }\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          peg$savedPos = s0;\n                                                          s1 = peg$c15(s1, s3, s5, s7, s9, s11, s15, s19, s21, s23, s25, s27);\n                                                          s0 = s1;\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_not_exists_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_EXISTS();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c19();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_not_exists_stmt();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c20(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseif_not_exists_stmt();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c21(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseif_not_exists_stmt();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c22(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c23(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseCOMMA();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c25(s3, s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_column_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c26(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c27(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecreate_constraint_check();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c28(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c29) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c31) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c32); }\n              }\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c33(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c34) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c35); }\n            }\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c31) {\n                  s3 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c36(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseidentity_stmt();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1);\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsekeyword_comment();\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c38(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsecollate_expr();\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c39(s1);\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsecolumn_format();\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c40(s1);\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parsestorage();\n                      if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c41(s1);\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parsereference_definition();\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c42(s1);\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          s1 = peg$parsecreate_option_character_set_kw();\n                          if (s1 !== peg$FAILED) {\n                            s2 = peg$parse__();\n                            if (s2 !== peg$FAILED) {\n                              s3 = peg$parseKW_ASSIGIN_EQUAL();\n                              if (s3 === peg$FAILED) {\n                                s3 = null;\n                              }\n                              if (s3 !== peg$FAILED) {\n                                s4 = peg$parse__();\n                                if (s4 !== peg$FAILED) {\n                                  s5 = peg$parseident_name();\n                                  if (s5 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c43(s1, s3, s5);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_definition_opt();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecolumn_definition_opt();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecolumn_definition_opt();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c44(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_definition_opt_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_ref();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_AS();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseexpr();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseidentity_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c47) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parseLPAREN();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseliteral_numeric();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseliteral_numeric();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseRPAREN();\n                        if (s12 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7, s8, s9, s10, s11, s12];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c50(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c51) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c52); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c53) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c54); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c55) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c56); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c57) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c58); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c60) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c61); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c62) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c63); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c64) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c66(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c67(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_var() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR__PRE_AT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsedata_type();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parseKW_ASSIGIN_EQUAL();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseexpr();\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c68(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_VAR__PRE_AT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident_name();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c69) {\n                s5 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c71(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_var_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedeclare_var();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedeclare_var();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedeclare_var();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedeclare_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DECLARE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedeclare_var_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c72(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DECLARE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_VAR__PRE_AT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident_name();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_TABLE();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_table_definition();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c73(s1, s3, s5, s7, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c74) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c75); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexec_varibale_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c78(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_varibale_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexec_variable();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexec_variable();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexec_variable();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c79(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexec_variable() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s1 = peg$c80;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseexpr();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c82(s2, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_else_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c83); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecrud_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseSEMICOLON();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_GO();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseKW_ELSE();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsecrud_stmt();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseSEMICOLON();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c84(s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseif_exists() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c83); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c85) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c86); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c87();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseif_exists();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_ref_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c89) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c90); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c91(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DROP();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_INDEX();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsecolumn_ref();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_ON();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsetable_name();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parsedrop_index_opt();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c92(s1, s3, s5, s9, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_DROP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_VIEW();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseif_exists();\n                  if (s5 === peg$FAILED) {\n                    s5 = null;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parsetable_ref_list();\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c93(s1, s3, s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c94(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c95(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_attribute() {\n    var s0;\n\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c96) {\n      s0 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c97); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c98) {\n        s0 = input.substr(peg$currPos, 13);\n        peg$currPos += 13;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c99); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c100) {\n          s0 = input.substr(peg$currPos, 13);\n          peg$currPos += 13;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c101); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_attribute_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseview_attribute();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseview_attribute();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseview_attribute();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseview_with() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c102) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c103); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c104) {\n              s5 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c105); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c106();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_view_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_VIEW();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseLPAREN();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parsecolumn_ref_list();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseRPAREN();\n                        if (s12 !== peg$FAILED) {\n                          s8 = [s8, s9, s10, s11, s12];\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parseKW_WITH();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parseview_attribute_list();\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_AS();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseselect_stmt_nake();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseview_with();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c107(s5, s7, s9, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c108(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_CONSTRAINT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_CONSTRAINT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ENABLE_CONSTRAINT();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_DISABLE_CONSTRAINT();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_ADD_COLUMN();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_DROP_COLUMN();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseALTER_RENAME_TABLE();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseALTER_ALGORITHM();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseALTER_LOCK();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_ALTER();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c109(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c110(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c111(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c112(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c113) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c114); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c57) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c58); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c115) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c116); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c117) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c118); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c119) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c121(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c122) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c57) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c58); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c124) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c125); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c126) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c127); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c128) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c129); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c130(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_constraint_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c131(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c132(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ENABLE_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c102) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c103); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c102) {\n              s5 = input.substr(peg$currPos, 5);\n              peg$currPos += 5;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c103); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONSTRAINT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c133(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DISABLE_CONSTRAINT() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c134) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c136(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c137(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c138(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_check();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c139(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_with_index_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_options_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_ON();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseLBRAKE();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseident_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseRBRAKE();\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c140(s5, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseindex_options();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseindex_options_list();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c141(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c142) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_with_index_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c144(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c145(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_check() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c102) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c103); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {\n              s6 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {\n                  s8 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c149); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c150) {\n                      s10 = input.substr(peg$currPos, 11);\n                      peg$currPos += 11;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseLPAREN();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseor_and_where_expr();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseRPAREN();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c152(s1, s3, s5, s8);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c153) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c155(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c156) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c157); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c158) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c159); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c160) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c162(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseon_reference();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c163(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DELETE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsereference_option();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c164(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CURRENT_TIMESTAMP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c165(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c166) {\n        s1 = input.substr(peg$currPos, 8);\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c167); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c168) {\n          s1 = input.substr(peg$currPos, 7);\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c169); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c170) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c171); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c172) {\n              s1 = input.substr(peg$currPos, 9);\n              peg$currPos += 9;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c173); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c174) {\n                s1 = input.substr(peg$currPos, 11);\n                peg$currPos += 11;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c175); }\n              }\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_CURRENT_TIMESTAMP();\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c176(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c177) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c178); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c179) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c180); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c181();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c182) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c183); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c184) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c185); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c186(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c189) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c190); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c191) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c192); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c193) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c194); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c195) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c196); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c197) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c198); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c199(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c200) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c201); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c202(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c203) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c204); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c205;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c209) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c124) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c205;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c211(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c212) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c213); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c214(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseKW_ON();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseLBRAKE();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseident_name();\n                      if (s5 !== peg$FAILED) {\n                        s6 = peg$parse__();\n                        if (s6 !== peg$FAILED) {\n                          s7 = peg$parseRBRAKE();\n                          if (s7 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c215(s5);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 12).toLowerCase() === peg$c216) {\n                  s1 = input.substr(peg$currPos, 12);\n                  peg$currPos += 12;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c217); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseLBRAKE();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parseident_name();\n                        if (s5 !== peg$FAILED) {\n                          s6 = peg$parse__();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseRBRAKE();\n                            if (s7 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c218(s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c219(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c220(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c221(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunlock_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNLOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c222();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c224); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c225) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c226); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c227(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c228) {\n        s1 = input.substr(peg$currPos, 12);\n        peg$currPos += 12;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c229); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c230) {\n            s3 = input.substr(peg$currPos, 5);\n            peg$currPos += 5;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c231); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c232(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parselock_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c233(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_table_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parselock_table();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parselock_table();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parselock_table();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c234(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLES();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parselock_table_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c235(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c236(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c237;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c238); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c239;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c240); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c241(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c25(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c242(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c243(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref_index();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c244(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetop_clause();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseKW_DISTINCT();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecolumn_clause();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefrom_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsefor_xml();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c245(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetop_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TOP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c246) {\n                      s9 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c248(s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TOP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c246) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c247); }\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c249(s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c250(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c251(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c252(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c25(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c253(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsebinary_column_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c254(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_alias_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident_name();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseLPAREN();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsecolumn_list();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseRPAREN();\n                    if (s10 !== peg$FAILED) {\n                      s5 = [s5, s6, s7, s8, s9, s10];\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c255(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c256(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c256(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c257(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_unpivot_common_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c149); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsein_op_right();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c258(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepivot_unpivot_common_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c259(s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UNPIVOT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsepivot_unpivot_common_clause();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsealias_clause();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c260(s5, s7, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c261(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c262) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c263); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c264) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c265); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c266(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CLUSTERED();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_NONCLUSTERED();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c267(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c268(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_number_expression_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_number_expression();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsepartition_number_expression();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsepartition_number_expression();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_number_expression() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_numeric();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c269(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c270) {\n          s3 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c271); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepartition_number_expression_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c272(s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c273(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c274) {\n        s1 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c275); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c276) {\n          s1 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c277); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c278) {\n            s1 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c279); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c273(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c281); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c282) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c283); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c284(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c285) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c286); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c287) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c288); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c290) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c291); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c292) {\n                  s1 = input.substr(peg$currPos, 14);\n                  peg$currPos += 14;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c293); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 14).toLowerCase() === peg$c294) {\n                    s1 = input.substr(peg$currPos, 14);\n                    peg$currPos += 14;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c295); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 22).toLowerCase() === peg$c296) {\n                      s1 = input.substr(peg$currPos, 22);\n                      peg$currPos += 22;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c297); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 22).toLowerCase() === peg$c298) {\n                        s1 = input.substr(peg$currPos, 22);\n                        peg$currPos += 22;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c299); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c300) {\n                          s1 = input.substr(peg$currPos, 13);\n                          peg$currPos += 13;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c301); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c302) {\n                            s1 = input.substr(peg$currPos, 6);\n                            peg$currPos += 6;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c303); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c304) {\n                              s1 = input.substr(peg$currPos, 9);\n                              peg$currPos += 9;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c305); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 15).toLowerCase() === peg$c306) {\n                                s1 = input.substr(peg$currPos, 15);\n                                peg$currPos += 15;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c307); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 16).toLowerCase() === peg$c308) {\n                                  s1 = input.substr(peg$currPos, 16);\n                                  peg$currPos += 16;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c309); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 27).toLowerCase() === peg$c310) {\n                                    s1 = input.substr(peg$currPos, 27);\n                                    peg$currPos += 27;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c311); }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseKW_ASSIGIN_EQUAL();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseKW_ON();\n                      if (s5 === peg$FAILED) {\n                        s5 = peg$parseKW_OFF();\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c312(s1, s3, s5);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 16).toLowerCase() === peg$c313) {\n                  s1 = input.substr(peg$currPos, 16);\n                  peg$currPos += 16;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c314); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse__();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseKW_ASSIGIN_EQUAL();\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse__();\n                      if (s4 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c124) {\n                          s5 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s5 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n                        }\n                        if (s5 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c315) {\n                            s5 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c316); }\n                          }\n                          if (s5 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 4) === peg$c317) {\n                              s5 = peg$c317;\n                              peg$currPos += 4;\n                            } else {\n                              s5 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c318); }\n                            }\n                          }\n                        }\n                        if (s5 !== peg$FAILED) {\n                          s6 = peg$parse__();\n                          if (s6 !== peg$FAILED) {\n                            s7 = peg$parseon_partition();\n                            if (s7 === peg$FAILED) {\n                              s7 = null;\n                            }\n                            if (s7 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c319(s1, s3, s5, s7);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsekeyword_comment();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c320(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c321(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c321(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c322(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c323(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c324(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c325) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c326); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref_index();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c327(s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 24).toLowerCase() === peg$c328) {\n        s1 = input.substr(peg$currPos, 24);\n        peg$currPos += 24;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c329); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c330(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c331) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c332); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_INDEX();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseLPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseident_name_list();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseRPAREN();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c333(s1, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c331) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c332); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_INDEX();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseKW_ASSIGIN_EQUAL();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseident();\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c334(s1, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c331) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c332); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c335) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c336); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c325) {\n                  s1 = input.substr(peg$currPos, 9);\n                  peg$currPos += 9;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c326); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c337) {\n                    s1 = input.substr(peg$currPos, 8);\n                    peg$currPos += 8;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c338); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c339) {\n                      s1 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c340); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c341) {\n                        s1 = input.substr(peg$currPos, 6);\n                        peg$currPos += 6;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c342); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c343) {\n                          s1 = input.substr(peg$currPos, 7);\n                          peg$currPos += 7;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c344); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 13).toLowerCase() === peg$c345) {\n                            s1 = input.substr(peg$currPos, 13);\n                            peg$currPos += 13;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c346); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 17).toLowerCase() === peg$c347) {\n                              s1 = input.substr(peg$currPos, 17);\n                              peg$currPos += 17;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c348); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c349) {\n                                s1 = input.substr(peg$currPos, 8);\n                                peg$currPos += 8;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c350); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 15).toLowerCase() === peg$c351) {\n                                  s1 = input.substr(peg$currPos, 15);\n                                  peg$currPos += 15;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c352); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 15).toLowerCase() === peg$c353) {\n                                    s1 = input.substr(peg$currPos, 15);\n                                    peg$currPos += 15;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c354); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c355) {\n                                      s1 = input.substr(peg$currPos, 7);\n                                      peg$currPos += 7;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c357) {\n                                        s1 = input.substr(peg$currPos, 12);\n                                        peg$currPos += 12;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c358); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c359) {\n                                          s1 = input.substr(peg$currPos, 8);\n                                          peg$currPos += 8;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c360); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c361) {\n                                            s1 = input.substr(peg$currPos, 7);\n                                            peg$currPos += 7;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c362); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c363) {\n                                              s1 = input.substr(peg$currPos, 8);\n                                              peg$currPos += 8;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c364); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c365) {\n                                                s1 = input.substr(peg$currPos, 7);\n                                                peg$currPos += 7;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c366); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {\n                                                  s1 = input.substr(peg$currPos, 5);\n                                                  peg$currPos += 5;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c368); }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c369(s1);\n            }\n            s0 = s1;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint_item_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_hint_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_hint_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_hint_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_hint() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_hint_item_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c370(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c371();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsetable_hint();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c372(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsevalue_clause();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsevalue_alias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c373(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseLPAREN();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseunion_stmt();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsevalue_clause();\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseRPAREN();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parsevalue_alias_clause();\n                      if (s7 === peg$FAILED) {\n                        s7 = null;\n                      }\n                      if (s7 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c374(s3, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_RIGHT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FULL();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c375(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CROSS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_JOIN();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c376();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_INNER();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_JOIN();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c377(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseDOT();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseident();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c378(s1, s5, s9, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseident();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseDOT();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseident();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c379(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c380(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c381(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c382(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c384(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_index() {\n    var s0;\n\n    s0 = peg$parsecolumn_order_list();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_list();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c385(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c386(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c387(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c388(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_xml_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c389) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c391) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c392); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c393) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c394); }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c395(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c396) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c397); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseLPAREN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref();\n              if (s6 === peg$FAILED) {\n                s6 = peg$parseliteral_string();\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c398(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_xml() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c149); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c400); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefor_xml_item();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c401(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_UPDATE();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsetable_ref_list();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_SET();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseset_list();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsewhere_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c402(s2, s6, s10, s12);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c403(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_without_kw();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c404;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c405); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c406(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_without_kw();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c404;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c405); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c407(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c408(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c409(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c410(s1, s5, s7, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_IGNORE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INTO();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetable_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseinsert_value_clause();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c411(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c412();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c386(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c414(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c416(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecase_when_then_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c417(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecase_when_then_list();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c418(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecase_when_then();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecase_when_then();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c16(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c419(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c420(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_expr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parse_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseunion_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsecomparison_op_right();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c421(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebinary_column_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseLOGIC_OPERATOR();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c423(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c426;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c427); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c404;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c405); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c428(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c429(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c430(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c431(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c432(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c433) {\n      s0 = peg$c433;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c435;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c437) {\n          s0 = peg$c437;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c438); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c439) {\n            s0 = peg$c439;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c440); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c441;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c442); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c404;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c405); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c443) {\n                  s0 = peg$c443;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c444); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c445(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c446(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c447(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c431(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c431(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c431(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c448(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c449(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c450(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c451;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c452); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c453;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c454); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c455(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c456;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c458;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c459); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c460;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c461); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c462(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parsevar_decl();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c463(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c464(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c465(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c467(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsebrackets_quoted_ident();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c468;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c469); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c470.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c471); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c470.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c471); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c468;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c469); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c472(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c205;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c206); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c473.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c474); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c473.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c474); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c205;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c206); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c472(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c475;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c477.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c478); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c477.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c478); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c475;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c476); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c472(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebrackets_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c479;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c481.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c482); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c481.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c482); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s3 = peg$c483;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c484); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c472(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c485(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c465(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c486(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident_name();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident_name();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c488.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c490.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c492.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c494;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c496(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c497(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c498(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c499(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c502(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseon_update_current_timestamp();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c503) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c504); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c505(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c507(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c508(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewindow_frame_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c509(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification_frameless() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c510(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_frame_following();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsewindow_frame_preceding();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c511(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewindow_frame_bound();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AND();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsewindow_frame_bound();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c512(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_bound() {\n    var s0;\n\n    s0 = peg$parsewindow_frame_preceding();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_following();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c513) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c514); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c515(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c516) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c517); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c518(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c315) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c316); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c521();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c524(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c525(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c526(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = [];\n                    s9 = peg$currPos;\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseKW_AND();\n                      if (s11 === peg$FAILED) {\n                        s11 = peg$parseKW_OR();\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseexpr();\n                          if (s13 !== peg$FAILED) {\n                            s10 = [s10, s11, s12, s13];\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    while (s9 !== peg$FAILED) {\n                      s8.push(s9);\n                      s9 = peg$currPos;\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_AND();\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseKW_OR();\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseexpr();\n                            if (s13 !== peg$FAILED) {\n                              s10 = [s10, s11, s12, s13];\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse__();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseorder_by_clause();\n                        if (s10 === peg$FAILED) {\n                          s10 = null;\n                        }\n                        if (s10 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c527(s1, s5, s8, s10);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseor_and_expr();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseorder_by_clause();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c528(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c456;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c529();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsescalar_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c530(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_time_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseon_update_current_timestamp();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c531(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseproc_func_name();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseor_and_where_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c532(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_time_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parsescalar_time_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_USER();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_USER();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_SYSTEM_USER();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c533(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c534(s1, s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c535(s1, s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c536(s1, s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c537();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c538();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c539();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c540();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c541) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c542); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s3 = peg$c205;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        s5 = peg$parsesingle_char();\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parsesingle_char();\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c205;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c206); }\n          }\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c543(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c468;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c469); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c468;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c469); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c544(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c205;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c206); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c205;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c206); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c545(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c468;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c469); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c468;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c469); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c545(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c546.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c548.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c550) {\n      s1 = peg$c550;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c551); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c552();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c553) {\n        s1 = peg$c553;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c554); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c555();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c556) {\n          s1 = peg$c556;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c557); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c558();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c559) {\n            s1 = peg$c559;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c560); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c561();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c562) {\n              s1 = peg$c562;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c563); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c564();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c565) {\n                s1 = peg$c565;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c566); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c567();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c568) {\n                  s1 = peg$c568;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c569); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c570();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c571) {\n                    s1 = peg$c571;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c572); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c573();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c574) {\n                      s1 = peg$c574;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c575); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c576();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c577) {\n                        s1 = peg$c577;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c578); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c579(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c580;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c581); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c582();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c583) {\n                            s1 = peg$c583;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c584); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c585();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.substr(peg$currPos, 2) === peg$c586) {\n                              s1 = peg$c586;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c587); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c588();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.substr(peg$currPos, 2) === peg$c589) {\n                                s1 = peg$c589;\n                                peg$currPos += 2;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c590); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c591();\n                              }\n                              s0 = s1;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c592.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c593); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c594(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c595(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c596(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c597(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c598(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c453;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c454); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c451;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c452); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c599(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c453;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c454); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c451;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c452); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c600(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c601;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c602); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c603(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c605(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c606.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c608.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c610.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c611); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c612.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c613); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c57) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c619) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c620); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TOP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c625) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c626); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c627) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c628); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c631();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECLARE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c632) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c634();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c637) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c639();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c640) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c642) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c644) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c646) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c652) {\n      s1 = peg$c652;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c654) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c656) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c658) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c659); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c662) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c664();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c665) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c667) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c668); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c179) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c180); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c669();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c670) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c671); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c122) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c672) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c673); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c674) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c675); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c676();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VIEW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c677) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c678); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c679();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c680) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c681); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c682();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c683) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c684); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c685();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c688();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c184) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c185); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c689();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c690) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c691); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFF() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c692) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c693); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c696) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c697); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c700) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c701); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c702) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c703); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c706) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c707); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c708) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c709); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c712) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c713); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c714) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c715); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c716) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c717); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c718();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c719) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c720); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c721) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c722); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c723) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c724); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c727) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c728); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c729) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c730); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c731();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c732) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c733); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c734();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c735) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c736); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c737();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c738) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c739); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c740();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c741) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c742); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c743();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c744) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c745); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c746();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c747) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c748); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c749();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c750) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c751); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c752();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c753) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c754); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c755();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c85) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c756); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c757();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c758();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c759) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c760); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c761();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c762) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c763); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c764();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c765) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c766); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c767();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c768) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c769); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c770();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c771) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c772); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c773();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c774) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c775); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c776();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c777) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c778); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c779();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c780) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c781); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c782();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c783) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c784); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c787) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c788); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c789) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c790); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c793) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c794); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c795();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c796) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c797); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c798();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MONEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c799) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c800); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c801();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLMONEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c802) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c803); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c804();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c805) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c806); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c807();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c808) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c809); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c810();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c811) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c812); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c813();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NVARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c814) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c815); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c816();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c817) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c818); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c819();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c820) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c821); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c822();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c823) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c824); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c825();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c826) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c827); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c828();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c829) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c830); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c831();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c832) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c833); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c834();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c835) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c836); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c837();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c838) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c839); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c840();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c841) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c842); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c843();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c844) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c845); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c846();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c847) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c848); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c849();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c850) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c851); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c852();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c853) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c854); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c855();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c856) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c857); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c858();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c859) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c860); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c861();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c862) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c863); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c864();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c865) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c866); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c867();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c868) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c869); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c870();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c871) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c872); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c873();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLDATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c874) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c875); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c877) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c878); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME2() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c880) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c881); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIMEOFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c883) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c884); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c886) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c887); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c888();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c889) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c890); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c892) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c894();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c895) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c896); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c897();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUEIDENTIFIER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c910) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c912();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c913) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c915();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c916) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c917); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c919) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c920); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c921();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c922) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c923); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c924();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c925) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c927();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c928) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c929); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c930();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c931) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c932); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c933();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c934) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c935); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c936();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c937) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c938); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c939();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c940) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c941); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c942();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c943) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c944); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c945();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c946) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c947); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c225) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c952();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c953) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c954); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c955();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNPIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c956) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c957); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c958();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c959) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c960); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c961();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c962) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c963); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c964();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c80;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c965) {\n      s0 = peg$c965;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c966); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c967;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c968); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c969) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c970); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c971) {\n      s0 = peg$c971;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c972); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c404;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c405); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c973) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c974); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c975) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c976); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c977();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c978) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c979); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c980();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c981) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c982); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c983();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c31) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c32); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c984();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c985) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c986); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c987();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c988) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c989); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c990();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c29) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c30); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c991();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CLUSTERED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c992) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c993); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c994();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NONCLUSTERED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c995) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c996); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c997();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c191) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c192); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c998();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c999) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1000); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1001();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1002) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1003); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1004();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1005) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1006); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1007();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c1008) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1009); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c1010) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1011); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1012) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1013); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c1014) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1015); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c1016) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1017); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c1018) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1019); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c601;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c602); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c1020;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1021); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c456;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c237;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c239;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c479;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c483;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c1022;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1023); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1024) {\n      s0 = peg$c1024;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1025); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1026) {\n      s0 = peg$c1026;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1027); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1028) {\n      s1 = peg$c1028;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c1030) {\n        s5 = peg$c1030;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1031); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1028) {\n          s6 = peg$c1028;\n          peg$currPos += 2;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsechar();\n          if (s6 !== peg$FAILED) {\n            s4 = [s4, s5, s6];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 === peg$FAILED) {\n        s3 = peg$parseblock_comment();\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1030) {\n          s5 = peg$c1030;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1031); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c1028) {\n            s6 = peg$c1028;\n            peg$currPos += 2;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n          }\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = void 0;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsechar();\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseblock_comment();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c1030) {\n          s3 = peg$c1030;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1031); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1032) {\n      s1 = peg$c1032;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1033); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1034;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1035); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1036(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1037); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1038.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1039); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c592.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c593); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c592.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c593); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1037); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parseproc_stmt();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1040();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1041(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1042(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1043(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1044(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1045(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_name();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1046(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1047(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1048(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1049(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1050(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1051(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral_numeric();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1052(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c601;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c602); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c601;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c602); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1053(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsecharacter_string_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumeric_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsejson_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsetext_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuniqueidentifier_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CHAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VARCHAR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_NCHAR();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_NVARCHAR();\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseLPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      if (peg$c606.test(input.charAt(peg$currPos))) {\n                        s11 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        while (s11 !== peg$FAILED) {\n                          s10.push(s11);\n                          if (peg$c606.test(input.charAt(peg$currPos))) {\n                            s11 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                          }\n                        }\n                      } else {\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c1055(s1, s3, s5, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_CHAR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_VARCHAR();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c1054(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1056(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLBRAKE();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_NVARCHAR();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRBRAKE();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s6 = peg$c1054(s1, s3, s5);\n                  if (s6) {\n                    s6 = peg$FAILED;\n                  } else {\n                    s6 = void 0;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parseLPAREN();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse__();\n                        if (s9 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c768) {\n                            s10 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s10 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c769); }\n                          }\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parse__();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parseRPAREN();\n                              if (s12 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c1057(s1, s3, s5, s10);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1058(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_NUMERIC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DECIMAL();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_INT();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_INTEGER();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_SMALLINT();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_TINYINT();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_BIGINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_FLOAT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_REAL();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_DOUBLE();\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseLPAREN();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      if (peg$c606.test(input.charAt(peg$currPos))) {\n                        s11 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        while (s11 !== peg$FAILED) {\n                          s10.push(s11);\n                          if (peg$c606.test(input.charAt(peg$currPos))) {\n                            s11 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                          }\n                        }\n                      } else {\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$currPos;\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = [];\n                              if (peg$c606.test(input.charAt(peg$currPos))) {\n                                s16 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s16 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                              }\n                              if (s16 !== peg$FAILED) {\n                                while (s16 !== peg$FAILED) {\n                                  s15.push(s16);\n                                  if (peg$c606.test(input.charAt(peg$currPos))) {\n                                    s16 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s16 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                                  }\n                                }\n                              } else {\n                                s15 = peg$FAILED;\n                              }\n                              if (s15 !== peg$FAILED) {\n                                s13 = [s13, s14, s15];\n                                s12 = s13;\n                              } else {\n                                peg$currPos = s12;\n                                s12 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parseRPAREN();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsenumeric_type_suffix();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c1059(s1, s3, s5, s10, s12, s16);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_NUMERIC();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_DECIMAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_INT();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_INTEGER();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_SMALLINT();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_TINYINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_BIGINT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_FLOAT();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_REAL();\n                          if (s3 === peg$FAILED) {\n                            s3 = peg$parseKW_DOUBLE();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseRBRAKE();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s5 = peg$c1054(s1, s3, s4);\n              if (s5) {\n                s5 = peg$FAILED;\n              } else {\n                s5 = void 0;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = [];\n                  if (peg$c606.test(input.charAt(peg$currPos))) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    while (s8 !== peg$FAILED) {\n                      s7.push(s8);\n                      if (peg$c606.test(input.charAt(peg$currPos))) {\n                        s8 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                      }\n                    }\n                  } else {\n                    s7 = peg$FAILED;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsenumeric_type_suffix();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c1060(s1, s3, s4, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLBRAKE();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_NUMERIC();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_DECIMAL();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_INT();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_INTEGER();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_SMALLINT();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_TINYINT();\n                      if (s3 === peg$FAILED) {\n                        s3 = peg$parseKW_BIGINT();\n                        if (s3 === peg$FAILED) {\n                          s3 = peg$parseKW_FLOAT();\n                          if (s3 === peg$FAILED) {\n                            s3 = peg$parseKW_REAL();\n                            if (s3 === peg$FAILED) {\n                              s3 = peg$parseKW_DOUBLE();\n                              if (s3 === peg$FAILED) {\n                                s3 = peg$parseKW_BIT();\n                                if (s3 === peg$FAILED) {\n                                  s3 = peg$parseKW_MONEY();\n                                  if (s3 === peg$FAILED) {\n                                    s3 = peg$parseKW_SMALLMONEY();\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRBRAKE();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = peg$currPos;\n                  s6 = peg$c1054(s1, s3, s5);\n                  if (s6) {\n                    s6 = peg$FAILED;\n                  } else {\n                    s6 = void 0;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse__();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsenumeric_type_suffix();\n                      if (s8 === peg$FAILED) {\n                        s8 = null;\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse__();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1061(s1, s3, s5, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATETIME2();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DATETIMEOFFSET();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_TIME();\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = [];\n                    if (peg$c606.test(input.charAt(peg$currPos))) {\n                      s10 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      while (s10 !== peg$FAILED) {\n                        s9.push(s10);\n                        if (peg$c606.test(input.charAt(peg$currPos))) {\n                          s10 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s10 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                        }\n                      }\n                    } else {\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseCOMMA();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = [];\n                            if (peg$c606.test(input.charAt(peg$currPos))) {\n                              s15 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s15 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              while (s15 !== peg$FAILED) {\n                                s14.push(s15);\n                                if (peg$c606.test(input.charAt(peg$currPos))) {\n                                  s15 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c607); }\n                                }\n                              }\n                            } else {\n                              s14 = peg$FAILED;\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c1062(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLBRAKE();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DATE();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_SMALLDATETIME();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_DATETIME2();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_DATETIME();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseKW_DATETIMEOFFSET();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parseKW_TIME();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseKW_TIMESTAMP();\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c1054(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1056(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_JSON();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1056(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TINYTEXT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_TEXT();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_MEDIUMTEXT();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_LONGTEXT();\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1063(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuniqueidentifier_type() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUEIDENTIFIER();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c1054(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1063(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n      'NOCHECK': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'READ': true, // for lock table\n      // 'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      // 'STATUS': true, // reserved (MySQL)\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      // 'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\n// for web worker\nif (typeof self === \"object\" && self) {\n  self.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n\nif (typeof global === \"undefined\" && typeof window === \"object\" && window) window.global = window\n\nif (typeof global === \"object\" && global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10 || alphabet) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10 || alphabet) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}